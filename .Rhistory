}
}
names(bList_Filt)
grpListInd
bListInd
grpVec
grpListInd <- grpVec[bListInd]
grpListInd
for(nB in seq_along(bListInd)){
# Retrieve the corresponding plot
plot_obj <- b_List[[bListInd[nB]]]
# Check if the plot object is valid
if (!is.null(plot_obj)) {
# Add a title to the plot
bList_Filt[[nB]] <- plot_obj
# Optionally set names for the filtered list
names(bList_Filt)[nB] <- paste("Group", grpListInd[nB])
}
}
names(bList_Filt)
eList_Filt <- list()
eLen <- unlist(lapply(e_List,length))
eListInd <- which(eLen !=0)
for(nE in seq_along(eListInd)){
# Retrieve the corresponding plot
plot_obj <- e_List[[eListInd[nE]]]
# Check if the plot object is valid
if (!is.null(plot_obj)) {
# Add a title to the plot
eList_Filt[[nE]] <- plot_obj +
ggtitle(paste("Enrichment Map of GO Terms (BP) for Group", grpListInd[nE]))
# Optionally set names for the filtered list
names(eList_Filt)[nE] <- paste("Group", grpListInd[nE])
}
}
# Check the result
print(eList_Filt)
plotPatn_List_Filt1 <- lapply(clusterNOs, function(clustr) plotPatn_List[[clustr]])
plotPatn_List_Filt2 <- lapply(bListInd, function(idx) plotPatn_List_Filt1[[idx]])
length( plotPatn_List_Filt2)
OutDir <- "KTI_MS_Figures/"
# Render plots in a loop
for(n in seq_along(bListInd)){
Grp <- grpListInd[n]
print(paste("Group: ",Grp ,sep=""))
png(paste(OutDir,"plotPatn_Gr_",Grp,".png",sep=""), w=600, h=400, pointsize=20)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
###
png(paste(OutDir,"BarChart_List_Gr_",Grp,".png",sep=""), w=600, h=600, pointsize=15)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
}
OutDir <- "KTI_MS_Figures/"
# Render plots in a loop
for(n in seq_along(bListInd)){
Grp <- grpListInd[n]
print(paste("Group: ",Grp ,sep=""))
png(paste(OutDir,"plotPatn_Gr_",Grp,".png",sep=""), w=600, h=400, pointsize=20)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
###
png(paste(OutDir,"BarChart_List_Gr_",Grp,".png",sep=""), w=600, h=600, pointsize=15)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
}
print(bList_Filt[[n]])
print(bList_Filt[[1]])
?barPlot
?barplot
b_List <- list()
nGrp2 <- 1
for(nGrp in 1:length(grpVec)){
Grp <- grpVec[nGrp]
ego_BP <- ego_BP_List[[nGrp]]
if(length(which(ego_BP@result$p.adjust< ego_BP@pvalueCutoff)) > 0){
ego_BP <- ego_BP_List[[nGrp]]
}else if(length(which(ego_BP@result$p.adjust< ego_BP@pvalueCutoff)) == 0){
ego_BP <- ego_BP_List2[[nGrp2]]
nGrp2 <- nGrp2 +1
}
# Generate a barplot
b <- barplot(ego_BP, showCategory = 10) + ggtitle(paste("Barplot of Enriched GO Terms (BP) for Group ",Grp,sep=""))
b_List[[nGrp]] <- b
}
length(b_List)
n
n <- 1
png(paste(OutDir,"BarChart_List_Gr_",Grp,".png",sep=""), w=600, h=600, pointsize=15)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"BarChart_List_Gr_",Grp,".png",sep=""), w=600, h=400, pointsize=15)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
bList_Filt <- list()
bLen <- unlist(lapply(b_List,length))
bListInd <- which(bLen !=0)
grpListInd <- grpVec[bListInd]
for(nB in seq_along(bListInd)){
# Retrieve the corresponding plot
plot_obj <- b_List[[bListInd[nB]]]
# Check if the plot object is valid
if (!is.null(plot_obj)) {
# Add a title to the plot
bList_Filt[[nB]] <- plot_obj
# Optionally set names for the filtered list
names(bList_Filt)[nB] <- paste("Group", grpListInd[nB])
}
}
bList_Filt <- list()
bLen <- unlist(lapply(b_List,length))
bListInd <- which(bLen !=0)
grpListInd <- grpVec[bListInd]
for(nB in seq_along(bListInd)){
# Retrieve the corresponding plot
plot_obj <- b_List[[bListInd[nB]]]
# Check if the plot object is valid
if (!is.null(plot_obj)) {
# Add a title to the plot
bList_Filt[[nB]] <- plot_obj
# Optionally set names for the filtered list
names(bList_Filt)[nB] <- paste("Group", grpListInd[nB])
}
}
png(paste(OutDir,"BarChart_List_Gr_",Grp,".png",sep=""), w=600, h=400, pointsize=15)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
n <- 1
png(paste(OutDir,"BarChart_List_Gr_",Grp,".png",sep=""), w=600, h=400, pointsize=15)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
bList_Filt
bList_Filt[[1]]
# Render plots in a loop
for(n in seq_along(bListInd)){
Grp <- grpListInd[n]
print(paste("Group: ",Grp ,sep=""))
png(paste(OutDir,"plotPatn_Gr_",Grp,".png",sep=""), w=600, h=400, pointsize=20)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
###
png(paste(OutDir,"BarChart_List_Gr_",Grp,".png",sep=""), w=600, h=400, pointsize=15)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
}
clusters3$counts
clusters3$pass
clusters3$summarise
clusters3$summarise$n_genes
clusters3$summarise$n_genes[1:12]
sum(clusters3$summarise$n_genes[1:12])
1000*1024^2
?DTOutput
?shiny::DTOutput
?DT::DTOutput
renv::dependencies()
plotlyOutput
?plotlyOutput
?shiny::plotlyOutput
?plotly::plotlyOutput
?summaryRprof
knitr::opts_chunk$set(echo = TRUE)
library(org.Gmax.eg.db)
library(clusterProfiler)
library(ggplot2)
library(enrichplot)
# save(clusters3,resIFull_FC,Results_CL3_AnntnTab_DF,Genelist_All,file="Clusters3_p_01_Data.RData")
setwd("C:/Users/ivanv/Desktop/UMN_Projects/Ritesh_DESeq_Analysis/KTI_MS_RNASeqAnalysis/")
load("Clusters3_p_01_Data.RData")
Cluster3_p01_DF <- Results_CL3_AnntnTab_DF
Clusters3_DF <- Cluster3_p01_DF[,c("GeneID","cluster")]
capwords <- function(s, strict = FALSE) {
cap <- function(s) paste(toupper(substring(s, 1, 1)),
{s <- substring(s, 2); if(strict) tolower(s) else s},
sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))
}
clusters3$plot
#sum(clusters3$summarise$n_genes[1:12])
#[1] 362
## clusters3 <- degPatterns(mat, metadata = coldataFilt, time = "Stage", col="Genotype",minc=5)
res <- clusters3
###
plotPatn_List <- list()
clusterNOs <- res$pass
for(nCl in clusterNOs){
# Filter the data for the cluster of interest
cluster_number <- nCl
resGr <- res[["normalized"]][res[["normalized"]]$cluster == cluster_number, ]
# Count the number of unique genes
num_genes <- length(unique(resGr$genes))
# Create the plot
gg <- ggplot(resGr, aes(Stage, value, color = Genotype, fill = Genotype)) +
geom_boxplot() +
geom_point(position = position_jitterdodge(dodge.width = 0.9)) +
geom_smooth(aes(group = Genotype), method = "loess") +
labs(
title = paste("Group :", cluster_number, "/ Number of Genes:", num_genes),
x = "Stage",  # X-axis label
y = "Z-Score of Gene Abundance"   # Y-axis label
) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5), # Bold title
axis.title.x = element_text(face = "bold"), # Bold X-axis label
axis.title.y = element_text(face = "bold"), # Bold Y-axis label
axis.text = element_text(size = 12) # Customize axis text size
)
plotPatn_List[[nCl]] <- gg
}
### In Variables
grpVec3 <- as.numeric(levels(factor(clusters3$df$cluster)))
clusters <- clusters3
grpVec <- grpVec3
ego_BP_List <- list()
ego_CC_List <- list()
ego_MF_List <- list()
### Out Variables
for(nGrp in 1:length(grpVec)){
Grp <- grpVec[nGrp]
group <- clusters$df %>% filter(cluster == Grp)
GeneList_Gr <- group[,1]
Genelist_Gr <- capwords((tolower(GeneList_Gr)))
ego_BP <- enrichGO(
gene          = Genelist_Gr,
universe		= Genelist_All,
OrgDb         = org.Gmax.eg.db,
keyType       = "GID",
ont           = "BP",
pvalueCutoff  = 0.05
)
#   ego_MF <- enrichGO(
# 	  gene          = Genelist_Gr,
# 	  universe		= Genelist_All,
# 	  OrgDb         = org.Gmax.eg.db,
# 	  keyType       = "GID",
# 	  ont           = "MF",
# 	  pvalueCutoff  = 0.05
#   )
#
#
#  ego_CC <- enrichGO(
# 	  gene          = Genelist_Gr,
# 	  universe		= Genelist_All,
# 	  OrgDb         = org.Gmax.eg.db,
# 	  keyType       = "GID",
# 	  ont           = "CC",
# 	  pvalueCutoff  = 0.05
#   )
#
ego_BP_List[[nGrp]] <- ego_BP
# ego_CC_List[[nGrp]] <- ego_CC
# ego_MF_List[[nGrp]] <- ego_MF
}
####
grpVec2 <- c(2,11,12,15)
ego_BP_List2 <- list()
for(nGrp in 1:length(grpVec2)){
Grp <- grpVec2[nGrp]
group2 <- clusters$df %>% filter(cluster == Grp)
GeneList_Gr2 <- group2[,1]
Genelist_Gr2 <- capwords((tolower(GeneList_Gr2)))
ego_BP <- enrichGO(
gene          = Genelist_Gr2,
universe		= Genelist_All,
OrgDb         = org.Gmax.eg.db,
keyType       = "GID",
ont           = "BP",
pvalueCutoff  = 0.075
)
ego_BP_List2[[nGrp]] <- ego_BP
# ego_CC_List[[nGrp]] <- ego_CC
# ego_MF_List[[nGrp]] <- ego_MF
}
# save(ego_BP_List,ego_CC_List,ego_MF_List,file="KTI_TC_eGO_Data.RData")
save(ego_BP_List,file="KTI_TC_eGO_Data.RData")
length(b_List)
load("GO_BP_EPlot_Data.RData")
bList_Filt <- list()
bLen <- unlist(lapply(b_List,length))
bListInd <- which(bLen !=0)
grpListInd <- grpVec[bListInd]
for(nB in seq_along(bListInd)){
# Retrieve the corresponding plot
plot_obj <- b_List[[bListInd[nB]]]
# Check if the plot object is valid
if (!is.null(plot_obj)) {
# Add a title to the plot
bList_Filt[[nB]] <- plot_obj
# Optionally set names for the filtered list
names(bList_Filt)[nB] <- paste("Group", grpListInd[nB])
}
}
# Prepare filtered plot lists
plotPatn_List_Filt1 <- lapply(clusterNOs, function(clustr) plotPatn_List[[clustr]])
plotPatn_List_Filt2 <- lapply(bListInd, function(idx) plotPatn_List_Filt1[[idx]])
OutDir <- "KTI_MS_Transcriptomics_Figures/"
bListInd
n <- 1
Grp <- grpListInd[n]
print(paste("Group: ",Grp ,sep=""))
#png(paste(OutDir,"plotPatn_Gr_",Grp,".png",sep=""), w=600, h=400, pointsize=20)
tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1600, h=1200, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1400, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=2200, h=1400, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"plotPatn_Gr_",Grp,".png",sep=""), w=600, h=400, pointsize=20,res=300)
#tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=2200, h=1400, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=50,res=300)
#tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=2200, h=1400, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1800, h=800, pointsize=50,res=300)
#tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=2200, h=1400, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=50,res=300)
#tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=2200, h=1400, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=20,res=300)
#tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=2200, h=1400, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=20)
#tiff(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=20,res=400)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=20,res=300)
#tiff(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=20,res=400)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=15,res=300)
#tiff(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=20,res=400)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=2000, h=1200, pointsize=15,res=300)
#tiff(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=20,res=400)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=2000, h=1400, pointsize=15,res=300)
#tiff(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=20,res=400)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=2000, h=1600, pointsize=15,res=300)
#tiff(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=20,res=400)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=2000, h=1800, pointsize=15,res=300)
#tiff(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=20,res=400)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
Prepare filtered plot lists
## Prepare filtered plot lists
plotPatn_List_Filt1 <- lapply(clusterNOs, function(clustr) plotPatn_List[[clustr]])
plotPatn_List_Filt2 <- lapply(bListInd, function(idx) plotPatn_List_Filt1[[idx]])
OutDir <- "KTI_MS_Transcriptomics_Figures/"
# Render plots in a loop
for(n in seq_along(bListInd)){
Grp <- grpListInd[n]
print(paste("Group: ",Grp ,sep=""))
png(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=20,res=300)
#tiff(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=2200, h=1400, pointsize=20,res=400)
print(plotPatn_List_Filt2[[n]])
Sys.sleep(10)
dev.off()
###
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=2000, h=1800, pointsize=15,res=300)
#tiff(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=600, h=400, pointsize=20,res=400)
print(bList_Filt[[n]])
Sys.sleep(10)
dev.off()
}
length(plotPatn_List_Filt1)
lapply(plotPatn_List_Filt1,length)
grpListInd
lapply(bList_Filt,length)
lapply(bList,length)
lapply(b_List,length)
ego_BP_List2
length(ego_BP_List2)
length(ego_BP_List)
lapply(ego_BP_List)
lapply(ego_BP_List,length)
lapply(ego_BP_List,function(x) length(x[[1]]))
ego_BP_List[[2]]
b_List <- list()
nGrp2 <- 1
for(nGrp in 1:length(grpVec)){
Grp <- grpVec[nGrp]
ego_BP <- ego_BP_List[[nGrp]]
if(length(which(ego_BP@result$p.adjust< ego_BP@pvalueCutoff)) > 0){
ego_BP <- ego_BP_List[[nGrp]]
}else if(length(which(ego_BP@result$p.adjust< ego_BP@pvalueCutoff)) == 0){
ego_BP <- ego_BP_List2[[nGrp2]]
nGrp2 <- nGrp2 +1
}
# Generate a barplot
b <- barplot(ego_BP, showCategory = 10) + ggtitle(paste("Barplot of Enriched GO Terms (BP) for Group ",Grp,sep=""))
b_List[[nGrp]] <- b
}
lapply(b_List,length)
grpListInd
save(ego_BP_List,file="KTI_TC_eGO_Data.RData")
grpVec
clusterNOs
lapply(plotPatn_List_Filt1,length)
# Render plots in a loop
for(n in seq_along(c(1:12))){
Grp <- grpListInd[n]
print(paste("Group: ",Grp ,sep=""))
png(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=20,res=300)
print(plotPatn_List_Filt1[[n]])
Sys.sleep(10)
dev.off()
###
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=2000, h=1800, pointsize=15,res=300)
print(bList[[n]])
Sys.sleep(10)
dev.off()
}
# Render plots in a loop
for(n in seq_along(c(1:12))){
Grp <- grpListInd[n]
print(paste("Group: ",Grp ,sep=""))
png(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=20,res=300)
print(plotPatn_List_Filt1[[n]])
Sys.sleep(10)
dev.off()
###
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=2000, h=1800, pointsize=15,res=300)
print(b_List[[n]])
Sys.sleep(10)
dev.off()
}
grpVec
# Render plots in a loop
for(n in seq_along(c(1:12))){
Grp <- grpVec[n]
print(paste("Group: ",Grp ,sep=""))
png(paste(OutDir,"plotPatn_Gr_",Grp,"_V3.png",sep=""), w=1800, h=1200, pointsize=20,res=300)
print(plotPatn_List_Filt1[[n]])
Sys.sleep(10)
dev.off()
###
png(paste(OutDir,"BarChart_List_Gr_",Grp,"_V3.png",sep=""), w=2000, h=1800, pointsize=15,res=300)
print(b_List[[n]])
Sys.sleep(10)
dev.off()
}
3000*1024^2
gc()
shiny::runApp('C:/Users/ivanv/Downloads/GS4PB_Test/GS4PB/App')
library(shiny)
shinyApp()
?shinyApp()
library(GS4PB)
GS4PB::run_app()
getwd()
setwd("C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/GS4PB/")
devtools::document()
devtools::build()
devtools::install()
library(GS4PB)
remove.packages("GS4PB")
remove.packages("GS4PB")
devtools::document()
devtools::build()
devtools::install()
library(GS4PB)
GS4PB::run_app()
GS4PB::run_app()
q()
