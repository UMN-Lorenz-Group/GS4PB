BiocManager::install("geneLenDataBase",force=TRUE)
BiocManager::install("goseq")
BiocManager::install("goseq")
BiocManager::install("geneLenDataBase")
#####
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
rm(list=ls())
#####
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
#####
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
install.packages("topGO")
library(topGO)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("topGO")
q()
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
q()
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
library(AlphaSimR)
founderPop <- runMacs2(nInd=300,nChr=20,segSites=300,inbred=TRUE)
SP = SimParam$new(founderPop)
SP$addTraitA(nQtlPerChr=100)
SP$addSnpChip(1)
pop = newPop(founderPop)
genMean = meanG(pop)
F1Pop = selectCross(pop=pop,use="gv",nInd=300,nCrosses=150,nProgeny=10)
F2Pop = self(F1Pop, simParam=SP,nProgeny=1 )
genMean = c(genMean, meanG(F2Pop))
F3Pop = self(F2Pop, simParam=SP,nProgeny=1 )
genMean = c(genMean, meanG(F3Pop))
F4Pop = self(F3Pop, simParam=SP,nProgeny=1 )
genMean = c(genMean, meanG(F3Pop))
F5Pop = self(F4Pop, simParam=SP,nProgeny=1 )
genMean = c(genMean, meanG(F4Pop))
####
markerNames <- paste(rep(c(1:20),each=300),c(1:300),sep="_")
genoTable <- pullMarkerGeno(F4Pop, markers=markerNames, simParam=SP)
parGenoTable <- pullMarkerGeno(pop, markers=markerNames, simParam=SP)
Ped <- getPed(F4Pop)
dim(Ped)
dim(parGenoTable)
dim(genoTable)
length(markerNames)
set.seed(125)
ind <- sample(c(1:6000),5000)
genoTable_msk <- genoTable
genoTable_msk[1:1500,ind] <- NA
combGenoTable_unMsk <- rbind(parGenoTable,genoTable_unMsk)
combGenoTable <- rbind(parGenoTable,genoTable)
combGenoTable_AB <- apply(combGenoTable,2,function(x) gsub("2","AA",x))
combGenoTable_AB <- apply(combGenoTable_AB,2,function(x) gsub("0","BB",x))
combGenoTable_AB <- apply(combGenoTable_AB,2,function(x) gsub("1","AB",x))
dim(combGenoTable_AB)
BARCSoySNPInfoCols <- read.table("NUST_Geno_a1_INFOCOL.txt")
SimPop1GenoTable <- cbind(BARCSoySNPInfoCols,t(combGenoTable_AB))
SimPop1GenoTable[1:5,1:10]
colnames(SimPop1GenoTable)[1:5] <- c("Chrom","Position","SNPID","REF","ALT")
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable,1,function(x) gsub("BB",paste(x[5],x[5],sep=""),x))
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable_Nt,1,function(x) gsub("AA",paste(x[4],x[4],sep=""),x))
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable_Nt,1,function(x) gsub("AB",paste(x[4],x[5],sep=""),x))
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable_Nt,1,function(x) gsub("NA","0",x))
SimPop1GenoTable_Nt[1:5,1:0]
SimPop1GenoTable_Nt[1:5,1:10]
SimPop1GenoTable[1:5,1:10]
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=""),x))
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable_Nt,1,function(x) gsub("BB",paste(x[5],x[5],sep=""),x))
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable_Nt,1,function(x) gsub("AB",paste(x[4],x[5],sep=""),x))
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable_Nt,1,function(x) gsub("NA","0",x))
dim(SimPop1GenoTable_Nt)
SimPop1GenoTable_Nt[1:5,1:10]
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=""),x))
SimPop1GenoTable_Nt[1:5,1:10]
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=""),x))
SimPop1GenoTable_Nt[1:5,1:10]
SimPop1GenoTable_Nt[1:10,1:10]
SimPop1GenoTable[1:10,1:10]
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=""),x))
SimPop1GenoTable[1:10,1:10]
SimPop1GenoTable_Nt[1:10,1:10]
SimPop1GenoTable_Nt <- apply(SimPop1GenoTable,1,function(x) t(gsub("AA",paste(x[4],x[4],sep=""),x)))
SimPop1GenoTable_Nt[1:10,1:10]
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=""),x)))
SimPop1GenoTable_Nt[1:10,1:10]
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("BB",paste(x[5],x[5],sep=""),x)))
SimPop1GenoTable_Nt[1:10,1:10]
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("AB",paste(x[4],x[5],sep=""),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("NA","0",x)))
SimPop1GenoTable_Nt[1:10,1:10]
individualID <- colnames(SimPop1GenoTable_Nt)[c(6:ncol(SimPop1GenoTable_Nt))]
individualID[1:10]
individualID[1800]
SimPop1GenoTable[1:10,1750:1800]
t(combGenoTable_AB)[1:2,1750:1800]
t(combGenoTable)[1:2,1750:1800]
dim(combGenoTable)
dim(combGenoTable)
t(combGenoTable)[1:2,1750:1800]
t(combGenoTable)[1:5,1750:1800]
combGenoTable_AB[1:5,1:5]
rownames(combGenoTable_AB) <- colnames(combGenoTable)
ncol(combGenoTable)
nrow(combGenoTable)
rownames(combGenoTable_AB) <- rownames(combGenoTable)
BARCSoySNPInfoCols <- read.table("NUST_Geno_a1_INFOCOL.txt")
SimPop1GenoTable <- cbind(BARCSoySNPInfoCols,t(combGenoTable_AB))
colnames(SimPop1GenoTable)[1:5] <- c("Chrom","Position","SNPID","REF","ALT")
SimPop1GenoTable[1:5,1:10]
SimPop1GenoTable[1:5,1795:1800]
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=""),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("BB",paste(x[5],x[5],sep=""),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("AB",paste(x[4],x[5],sep=""),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("NA","0",x)))
SimPop1GenoTable_Nt[1:5,1:5]
SimPop1GenoTable_Nt[1:5,1:10]
SimPop1GenoTable_Nt[1:5,1795:1800]
individualID <- colnames(SimPop1GenoTable_Nt)[c(6:ncol(SimPop1GenoTable_Nt))]
length(individualID)
SimPop1GenoTable_PED <- t(SimPop1GenoTable_Nt[,c(6:ncol(SimPop1GenoTable_Nt))])
dim(SimPop1GenoTable_PED)
SimPop1GenoTable_PED[1:5,1:10]
SimPop1GenoTable_PED[1795:1800,1:10]
nLines <- length(individualID)
IDCols_PED <- cbind(rep(0,nLines),individualID,rep(0,nLines),rep(0,nLines),rep(0,nLines),rep(0,nLines))
SimPop1GenoTable_PED <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt[,c(6:ncol(SimPop1GenoTable_Nt))]))
SimPop1GenoTable_PED[1:5,1:10]
dim(SimPop1GenoTable_PED)
SimPop1GenoTable_PED[1795:1800,1:10]
SimPop1GenoTable_PED[1795:1800,1:15]
combGenoTable <- rbind(parGenoTable,genoTable)
combGenoTable_msk <- rbind(parGenoTable,genoTable_msk)
###
combGenoTable_AB <- apply(combGenoTable_msk,2,function(x) gsub("2","AA",x))
combGenoTable_AB <- apply(combGenoTable_AB,2,function(x) gsub("0","BB",x))
combGenoTable_AB <- apply(combGenoTable_AB,2,function(x) gsub("1","AB",x))
rownames(combGenoTable_AB) <- rownames(combGenoTable)
BARCSoySNPInfoCols <- read.table("NUST_Geno_a1_INFOCOL.txt")
SimPop1GenoTable <- cbind(BARCSoySNPInfoCols,t(combGenoTable_AB))
colnames(SimPop1GenoTable)[1:5] <- c("Chrom","Position","SNPID","REF","ALT")
#### Prepare PED for Alphaplantimpute
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=""),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("BB",paste(x[5],x[5],sep=""),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("AB",paste(x[4],x[5],sep=""),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("NA","0",x)))
individualID <- colnames(SimPop1GenoTable_Nt)[c(6:ncol(SimPop1GenoTable_Nt))]
nLines <- length(individualID)
IDCols_PED <- cbind(rep(0,nLines),individualID,rep(0,nLines),rep(0,nLines),rep(0,nLines),rep(0,nLines))
SimPop1GenoTable_PED <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt[,c(6:ncol(SimPop1GenoTable_Nt))]))
SimPop1GenoTable_PED[1795:1800:1:10]
SimPop1GenoTable_PED[1795:1800,
1:10]
SimPop1GenoTable_PED[1795:1800,
1:15]
SimPop1GenoTable_PED[1798:1800,
1:15]
getwd()
write.table(SimPop1GenoTable_PED,"SimPop1GenoTable.ped",header=FALSE)
?write.table
write.table(SimPop1GenoTable_PED,"SimPop1GenoTable.ped",col.names = FALSE)
write.table(Ped,"SimPop1GenoTable_PED",col.names=FALSE)
write.table(Ped,"SimPop1GenoTable_Founders.txt",col.names=FALSE)
Ped[1:5,]
write.table(SimPop1GenoTable_PED,"SimPop1GenoTable.ped",col.names = FALSE,quote=FALSE,row.names = FALSE)
write.table(Ped,"SimPop1GenoTable_Founders.txt",col.names=FALSE,quote=FALSE,row.names = FALSE)
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("BB",paste(x[5],x[5],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("AB",paste(x[4],x[5],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("NA","0",x)))
individualID <- colnames(SimPop1GenoTable_Nt)[c(6:ncol(SimPop1GenoTable_Nt))]
nLines <- length(individualID)
IDCols_PED <- cbind(rep(0,nLines),individualID,rep(0,nLines),rep(0,nLines),rep(0,nLines),rep(0,nLines))
SimPop1GenoTable_PED <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt[,c(6:ncol(SimPop1GenoTable_Nt))]))
write.table(SimPop1GenoTable_PED,"SimPop1GenoTable.ped",col.names = FALSE,quote=FALSE,row.names = FALSE,sep=" ")
write.table(Ped,"SimPop1GenoTable_Founders.txt",col.names=FALSE,quote=FALSE,row.names = FALSE)
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("BB",paste(x[5],x[5],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("AB",paste(x[4],x[5],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("NA","0 0",x)))
individualID <- colnames(SimPop1GenoTable_Nt)[c(6:ncol(SimPop1GenoTable_Nt))]
nLines <- length(individualID)
IDCols_PED <- cbind(rep(0,nLines),individualID,rep(0,nLines),rep(0,nLines),rep(0,nLines),rep(0,nLines))
SimPop1GenoTable_PED <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt[,c(6:ncol(SimPop1GenoTable_Nt))]))
write.table(SimPop1GenoTable_PED,"SimPop1GenoTable.ped",col.names = FALSE,quote=FALSE,row.names = FALSE,sep=" ")
write.table(Ped,"SimPop1GenoTable_Founders.txt",col.names=FALSE,quote=FALSE,row.names = FALSE)
dim(SimPop1GenoTable_Nt)
SimPop1GenoTable_Nt[1:10,1800:1805]
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub(NA,"0 0",x)))
SimPop1GenoTable_Nt[1:10,1800:1805]
#### Prepare PED for Alphaplantimpute
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable,1,function(x) gsub("AA",paste(x[4],x[4],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("BB",paste(x[5],x[5],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("AB",paste(x[4],x[5],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("NA","0 0",x)))
SimPop1GenoTable_Nt[1:10,1800:1805]
### Complete Genotype
combGenoTable_AB_True <- apply(combGenoTable,2,function(x) gsub("2","AA",x))
combGenoTable_AB_True <- apply(combGenoTable_AB_True,2,function(x) gsub("0","BB",x))
combGenoTable_AB_True <- apply(combGenoTable_AB_True,2,function(x) gsub("1","AB",x))
rownames(combGenoTable_AB_True) <- rownames(combGenoTable)
BARCSoySNPInfoCols <- read.table("NUST_Geno_a1_INFOCOL.txt")
SimPop1GenoTable_True <- cbind(BARCSoySNPInfoCols,t(combGenoTable_AB_True))
colnames(SimPop1GenoTable_True)[1:5] <- c("Chrom","Position","SNPID","REF","ALT")
#### Prepare PED for Alphaplantimpute
SimPop1GenoTable_Nt_True <- t(apply(SimPop1GenoTable_True,1,function(x) gsub("AA",paste(x[4],x[4],sep=" "),x)))
SimPop1GenoTable_Nt_True <- t(apply(SimPop1GenoTable_Nt_True,1,function(x) gsub("BB",paste(x[5],x[5],sep=" "),x)))
SimPop1GenoTable_Nt_True <- t(apply(SimPop1GenoTable_Nt_True,1,function(x) gsub("AB",paste(x[4],x[5],sep=" "),x)))
SimPop1GenoTable_Nt_True <- t(apply(SimPop1GenoTable_Nt_True,1,function(x) gsub("NA","0 0",x)))
individualID <- colnames(SimPop1GenoTable_Nt_True)[c(6:ncol(SimPop1GenoTable_Nt_True))]
nLines <- length(individualID)
IDCols_PED <- cbind(rep(0,nLines),individualID,rep(0,nLines),rep(0,nLines),rep(0,nLines),rep(0,nLines))
SimPop1GenoTable_PED_True <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt_True[,c(6:ncol(SimPop1GenoTable_Nt_True))]))
dim(SimPop1GenoTable_Nt_True)
SimPop1GenoTable_Nt_True[1:5,1:10]
SimPop1GenoTable_Nt_True[1:5,1795:1800]
SimPop1GenoTable_PED_True <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt_True[,c(6:ncol(SimPop1GenoTable_Nt_True))]))
write.table(SimPop1GenoTable_PED_True,"SimPop1GenoTable_True.ped",col.names = FALSE,quote=FALSE,row.names = FALSE,sep=" ")
genoFile <- "SimPop1GenoTable_True.ped"
tasGeno <- rTASSEL::readGenotypeTableFromPath(
path = genoFile
)
genoFile <- "SimPop1_Geno.vcf"
DFToVCF_NAM(SimPop1GenoTable,genoFile)
DFToVCF_NAM <- function(ingeno, outfile){
input.geno <- ingeno
# order input.geno
input.geno <- input.geno[order(input.geno$Chrom, input.geno$Position), ]
# function to change AA, AB, BB to 1/1, 1/0, 0/0, change NA to ./. for each row
recode.marker.to.vcf <- function(geno.temp){
geno2 <- geno.temp[-c(1:5)]
geno2[geno2 == "AA"] = '1/1'
geno2[geno2 == "BB"] = '0/0'
geno2[geno2 == "AB"] = '1/0'
geno2[is.na(geno2)] = './.' # missing values are coded as 'NN'
return(geno2)
}
convert.geno <- t(apply(input.geno, 1, recode.marker.to.vcf))
vcf.format <- cbind(input.geno[,c(1:5)], convert.geno) %>%
as_tibble() %>%
dplyr::rename(ID = SNPID, CHROM = Chrom, POS = Position) %>%
dplyr::mutate(QUAL = '.', FILTER = 'PASS', INFO = '.', FORMAT = 'GT') %>%
dplyr::select(CHROM, POS, ID, REF, ALT, QUAL, FILTER, INFO, FORMAT, everything())
header <- c("##fileformat=VCFv4.0",
"##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">",
"##FORMAT=<ID=AD,Number=.,Type=Integer,Description=\"Allelic depths for the reference and alternate alleles in the order listed\">",
"##FORMAT=<ID=DP,Number=1,Type=Integer,Description=\"Read Depth (only filtered reads used for calling)\">",
"##FORMAT=<ID=GQ,Number=1,Type=Float,Description=\"Genotype Quality\">",
"##FORMAT=<ID=PL,Number=.,Type=Float,Description=\"Normalized, Phred-scaled likelihoods for AA,AB,BB genotypes where A=ref and B=alt; not applicable if site is not biallelic\">",
"##INFO=<ID=NS,Number=1,Type=Integer,Description=\"Number of Samples With Data\">",
"##INFO=<ID=DP,Number=1,Type=Integer,Description=\"Total Depth\">",
"##INFO=<ID=AF,Number=.,Type=Float,Description=\"Allele Frequency\">")
readr::write_lines(header, outfile,append=F)
line1 <- stringr::str_c(colnames(vcf.format), collapse = '\t') %>%
stringr::str_c('#', ., "")
readr::write_lines(line1, outfile,append=T)
readr::write_tsv(vcf.format, outfile,append=T)
return(vcf.format)
}
genoFile <- "SimPop1_Geno.vcf"
DFToVCF_NAM(SimPop1GenoTable,genoFile)
library(dplyr)
library(vcfR)
VCFtoDF_V2 <- function(infile){
vcf <- read.vcfR(infile, verbose = FALSE)
gt <- extract.gt(vcf, element = "GT", as.numeric = F,IDtoRowNames = FALSE)
fix_T <- as_tibble(getFIX(vcf))
gt2 <- matrix(0, ncol = ncol(gt), nrow = nrow(gt))
colnames(gt2) <- colnames(gt)
gt2a <- apply(gt,2, function(x) gsub("0/0","BB",x))
gt2b <- gsub("1[/|]1","AA",gt2a)
gt2c <- gsub("[10][/|][10]","AB",gt2b)
gt2d <- gsub("\\.[/|]\\.","NA",gt2c)
# gt2[(gt == "1/1")|(gt == "1|1")] <- 'BB'
# gt2[(gt == "0/0")|(gt == "0|0")] <- 'AA'
# gt2[(gt == "0/1")|(gt == "1/0")|(gt == "0|1")|(gt == "1|0")] <- 'AB'
# gt2[(gt == "\\./\\.")|(gt == "\\.|\\.")] <- NA
gt2 <- as_tibble(gt2d) %>% mutate(SNPID = fix_T$ID)
gt.simple <- fix_T %>% dplyr::select("ID", "CHROM", POS, REF, ALT) %>%
dplyr::rename(SNPID=ID, Chrom=CHROM, Position=POS) %>%
dplyr::left_join(gt2, by = 'SNPID')
return(gt.simple)
}
### Test if DFtoVCF function changes internal coding
genoInput <- VCFtoDF_V2(genoFile)
genoInput_mod <- as.data.frame(genoInput[,-c(1:5)])
genoInput_mod_AB <- apply(t(genoInput_mod),2,function(x) gsub("AA","2",x))
genoInput_mod_AB <- apply(genoInput_mod_AB,2,function(x) gsub("BB","0",x))
genoInput_mod_AB <- apply(genoInput_mod_AB,2,function(x) gsub("AB","1",x))
dim(parGenoTable)
dim(genoTable_msk)
dim(genoTable)
anyNA(genoTable)
anyNA(genoTable_msk)
combGenoTable_unMsk <- rbind(parGenoTable,genoTable)
impTest0Mod <- lapply(c(1:6000),function(x) length(which(genoInput_mod_AB[1:300,x]==combGenoTable_unMsk[1:300,x])))
sum(unlist(impTest0Mod))/(300*6000)
###
table(combGenoTable_unMsk)
table(genoInput_mod_AB)
dim(genoInput_mod_AB)
dim(combGenoTable_unMsk)
anyNA(genoInput_mod_AB)
table(genoInput_mod_AB[1:300,])
table(combGenoTable_unMsk[1:300,])
dim(combGenoTable_unMsk[1:300,])
dim(genoInput_mod_AB[1:300,])
genoFile2 <- "SimPop1_Geno_True.vcf"
DFToVCF_NAM(SimPop1GenoTable_True,genoFile2)
genoInput2 <- VCFtoDF_V2(genoFile2)
genoInput_mod2 <- as.data.frame(genoInput2[,-c(1:5)])
genoInput_mod2_AB <- apply(t(genoInput_mod2),2,function(x) gsub("AA","2",x))
genoInput_mod2_AB <- apply(genoInput_mod2_AB,2,function(x) gsub("BB","0",x))
genoInput_mod2_AB <- apply(genoInput_mod2_AB,2,function(x) gsub("AB","1",x))
combGenoTable_unMsk <- rbind(parGenoTable,genoTable)
impTest2Mod <- lapply(c(1:6000),function(x) length(which(genoInput_mod2_AB[1:300,x]==combGenoTable_unMsk[1:300,x])))
sum(unlist(impTest2Mod))/(300*6000)
tasGeno2 <- rTASSEL::readGenotypeTableFromPath(
path = genoFile2
)
tasGeno2
geno2_DF <- as.data.frame(getGenoTas_to_DF(tasGeno2))
getGenoTas_to_DF <- function(tasGeno){
tasSumExp <- rTASSEL::getSumExpFromGenotypeTable(
tasObj = tasGeno)
tasGenoDF <- (SummarizedExperiment::assays(tasSumExp)[[1]])
colnames(tasGenoDF) <- SummarizedExperiment::colData(tasSumExp)[,"Sample"]
### Extract Table Report DF
tableReport <- rJava::new(
rJava::J("net.maizegenetics.dna.map.PositionListTableReport"),
tasGeno %>% rTASSEL:::getPositionList()) %>%
rTASSEL:::tableReportToDF() %>% as.data.frame()
varSplit <- strsplit(tableReport[,"VARIANT"],"/")
varSplitTab <- cbind.data.frame(unlist(lapply(varSplit,function(x) x[1])),unlist(lapply(varSplit,function(x) x[2])))
vcfIDTab <- cbind.data.frame(tableReport[,c("Name","Chromosome","Position")],varSplitTab)
colnames(vcfIDTab) <- c("SNPID","Chrom","Position","REF","ALT")
gt2d_tasGeno <-as_tibble(cbind.data.frame(vcfIDTab,tasGenoDF))
return(gt2d_tasGeno)
}
geno2_DF <- as.data.frame(getGenoTas_to_DF(tasGeno2))
geno2_DF[1:5,1:5]
geno2_DF[1:5,1:10]
geno2_DF[1:5,1:10]
genoFile2
geno2_DF <- as.data.frame(getGenoTas_to_DF(tasGeno2))
impTest2VCFMod <- lapply(c(1:6000),function(x) length(which(geno2_DF[1:300,x]==combGenoTable_unMsk[1:300,x])))
sum(unlist(impTest2VCFMod))/(300*6000)
dim(combGenoTable_unMsk)
dim(geno2_DF)
geno2_DF <- t(as.data.frame(getGenoTas_to_DF(tasGeno2)))
dim(geno2_DF)
geno2_DF <- t(as.data.frame(getGenoTas_to_DF(tasGeno2)))
impTest2VCFMod <- lapply(c(1:6000),function(x) length(which(geno2_DF[6:305,x]==combGenoTable_unMsk[1:300,x])))
sum(unlist(impTest2VCFMod))/(300*6000)
geno2_DF <- t(as.data.frame(getGenoTas_to_DF(tasGeno2))[,-c(1:5)])
dim(geno2_DF)
impTest2VCFMod <- lapply(c(1:6000),function(x) length(which(geno2_DF[1:300,x]==combGenoTable_unMsk[1:300,x])))
sum(unlist(impTest2VCFMod))/(300*6000)
dim(geno2_DF)
geno2_DF[1:5,1:10]
combGenoTable_unMsk[1:5,1:10]
genoInput_mod2_AB[1:5,1:10]
dim(geno2_DF)
colnames(geno2_DF) <- colnames(combGenoTable_unMsk)
dim(geno2_DF)
genoInput_mod2_AB[1:5,1:10]
geno2_DF[1:5,1:10]
geno2_DF[1:5,1:10]
combGenoTable_unMsk[1:5,1:10]
apply(genoInput_mod2_AB[1:5,1:10],2,as.numeric)
apply(genoInput_mod2_AB[1:5,1:10],2,as.numeric)
dim(combGenoTable_unMsk)
dim(genoInput_mod2_AB)
rownames(genoInput_mod2_AB) <- rownames(combGenoTable_unMsk)
colnames(genoInput_mod2_AB) <- colnames(combGenoTable_unMsk)
dim(genoInput_mod2_AB)
apply(genoInput_mod2_AB[1:5,1:10],2,as.numeric)
rownames(genoInput_mod2_AB) <- rownames(combGenoTable_unMsk)
apply(genoInput_mod2_AB[1:5,1:10],2,as.numeric)
genoInput_mod2_AB_num <- apply(genoInput_mod2_AB,2,as.numeric)
rownames(genoInput_mod2_AB_num) <- rownames(combGenoTable_unMsk)
genoInput_mod2_AB_num[1:5,1:10]
combGenoTable_unMsk[1:5,1:10]
tasGeno <- tasGeno2
tasSumExp <- rTASSEL::getSumExpFromGenotypeTable(
tasObj = tasGeno)
tasGenoDF <- (SummarizedExperiment::assays(tasSumExp)[[1]])
colnames(tasGenoDF) <- SummarizedExperiment::colData(tasSumExp)[,"Sample"]
tableReport <- rJava::new(
rJava::J("net.maizegenetics.dna.map.PositionListTableReport"),
tasGeno %>% rTASSEL:::getPositionList()) %>%
rTASSEL:::tableReportToDF() %>% as.data.frame()
tableReport[1:5,1:10]
tableReport
dim(tableReport)
dim(tasGenoDF)
t(tasGenoDF)[1:5,1:10]
colnames(tasGenoDF) <- SummarizedExperiment::colData(tasSumExp)[,"Sample"]
t(tasGenoDF)[1:5,1:10]
SummarizedExperiment::colData(tasSumExp)[,"Sample"]
t(tasGenoDF)[1:5,1:10]
SummarizedExperiment::assayNames(tasGenoDF)
SummarizedExperiment::assays(tasGenoDF)
SummarizedExperiment::colData(tasSumExp)
SummarizedExperiment::rowData(tasSumExp)
genoInput_mod2_AB_num[1:5,1:10]
tasGeno2 <- rTASSEL::readGenotypeTableFromPath(
path = genoFile2
)
geno2_DF <- t(as.data.frame(getGenoTas_to_DF(tasGeno2))[,-c(1:5)])
geno2_DF[1:5,1:10]
colnames(geno2_DF) <- colnames(combGenoTable_unMsk)
geno2_DF[1:5,1:10]
library(AlphaSimR)
founderPop <- runMacs2(nInd=300,nChr=20,segSites=300,inbred=TRUE)
SP = SimParam$new(founderPop)
SP$addTraitAG(nQtlPerChr=100,varG=14, varGxE =113, varEnv =0)
SP$addTraitAG(nQtlPerChr=100,var=14, varGxE =113, varEnv =0)
pop = newPop(founderPop)
genMean = meanG(pop)
genMean
pop@gv
dim(pop@gv)
pop@gxe
dim(pop@gxe)
length(pop@gxe)
(pop@gxe)[1:5,]
(pop@gxe)[1:5]
dim(pop@pheno)
genMean = meanG(pop)
genMean
F1Pop = selectCross(pop=pop,use="gv",nInd=300,nCrosses=150,nProgeny=10)
F2Pop = self(F1Pop, simParam=SP,nProgeny=1 )
genMean = c(genMean, meanG(F2Pop))
F3Pop = self(F2Pop, simParam=SP,nProgeny=1 )
genMean = c(genMean, meanG(F3Pop))
F4Pop = self(F3Pop, simParam=SP,nProgeny=1 )
genMean = c(genMean, meanG(F3Pop))
F5Pop = self(F4Pop, simParam=SP,nProgeny=1 )
genMean = c(genMean, meanG(F4Pop))
genMean
SP$addTraitAG(nQtlPerChr=100,var=14,varGxE =113,varEnv =2)
SP$addTraitAG(nQtlPerChr=100,var=14,varGxE =113,varEnv =2)
cor2GxE <- matrix(c(0.75,1),c(1,0.75))
cor2GxE
cor2GxE <- matrix(c(0.75,1),c(1,0.75),nrow=2)
cor2GxE
cor2GxE <- as.matrix(rbind(c(0.75,1),c(1,0.75)))
cor2GxE
SP$addTraitAG(nQtlPerChr=100,var=14,varGxE =113,corGxE =cor2GxE )
SP = SimParam$new(founderPop)
cor2GxE <- as.matrix(rbind(c(0.75,1),c(1,0.75)))
SP$addTraitAG(nQtlPerChr=100,var=14,varGxE =113,corGxE =cor2GxE )
SP$addTraitAG(nQtlPerChr=100,mean = c(0,0),var=14,varGxE =113,corGxE =cor2GxE )
q()
BiocManager::install("GWASTools")
library(GWASTools)
mendelErr
setwd("C:/Users/ivanv/Desktop/UMN_Projects/NUST_Projects/NUST_GEI_Panel/NUST_GEI_Panel_Selection")
NUSTDivSet <- read.csv("NUST_Diversity_Panel_Selected_Lines_List1_V3.csv")
RMSets_1 <- read.csv("RM 1 Codes.csv")
RMSets_2 <- read.csv("RM 2 Codes .csv")
RMSets_3 <- read.csv("RM 3 Codes.csv")
RMSets_4 <- read.csv("RM 4 Codes.csv")
dim(RMSets_1)
dim(RMSets_2)
dim(RMSets_3)
dim(RMSets_4)
RMSets_1[,"Line"] <- gsub("[-_*() ]","",RMSets_1[,"Line"])
RMSets_1[,"Line"] <- gsub("MN0811CN","",RMSets_1[,"Line"])
RMSets_2[,"Line"] <- gsub("[-_*() ]","",RMSets_2[,"Line"])
RMSets_3[,"Line"] <- gsub("[-_*() ]","",RMSets_3[,"Line"])
RMSets_4[,"Line"] <- gsub("[-_*() ]","",RMSets_4[,"Line"])
NUSTDivSet1 <- NUSTDivSet[,c(1:5)]
NUSTDivSet2 <- NUSTDivSet[,c(6:9)]
NUSTDivSet3 <- NUSTDivSet[,c(10:13)]
NUSTDivSet4 <- NUSTDivSet[,c(14:17)]
colnames(NUSTDivSet1)[3] <- "Test"
colnames(NUSTDivSet1)[4] <- "Line"
colnames(NUSTDivSet2)[3] <- "Line"
colnames(NUSTDivSet3)[3] <- "Line"
colnames(NUSTDivSet4)[3] <- "Line"
NUSTDivSet4[,"Line"] <- gsub("[A-Z]*$","",NUSTDivSet4[,"Line"])
RMSets_1_Comb <- merge(RMSets_1,NUSTDivSet1,by="Line")
RMSets_2_Comb <- merge(RMSets_2,NUSTDivSet2,by="Line")
RMSets_3_Comb <- merge(RMSets_3,NUSTDivSet3,by="Line")
RMSets_4_Comb <- merge(RMSets_4,NUSTDivSet4,by="Line")
RMSets_1_Mod <- RMSets_1_Comb[,-c(ncol(RMSets_1_Comb)-2,ncol(RMSets_1_Comb)-1)]
RMSets_2_Mod <- RMSets_2_Comb[,-c(ncol(RMSets_2_Comb)-2,ncol(RMSets_2_Comb)-1)]
RMSets_3_Mod <- RMSets_3_Comb[,-c(ncol(RMSets_3_Comb)-2,ncol(RMSets_3_Comb)-1)]
RMSets_4_Mod <- RMSets_4_Comb[,-c(ncol(RMSets_4_Comb)-2,ncol(RMSets_4_Comb)-1)]
missingLines <- setdiff(RMSets_4[,"Line"],RMSets_4_Comb[,"Line"])
dim(RMSets_1_Mod)
dim(RMSets_2_Mod)
dim(RMSets_3_Mod)
dim(RMSets_4_Mod)
write.csv(RMSets_1_Mod,"RM_Sets1_Mod.csv",quote=FALSE,row.names =F)
write.csv(RMSets_1_Mod,"RM_Sets1_Mod.csv",quote=FALSE,row.names =F)
write.csv(RMSets_2_Mod,"RM_Sets2_Mod.csv",quote=FALSE,row.names =F)
write.csv(RMSets_3_Mod,"RM_Sets3_Mod.csv",quote=FALSE,row.names =F)
write.csv(RMSets_4_Mod,"RM_Sets4_Mod.csv",quote=FALSE,row.names =F)
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
