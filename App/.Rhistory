?as.ba_db
con <- as.ba_db(
crop = "soybean",
db="https://soybeanbase.breedinginsight.net/"
)
con
loc <- brapi::ba_locations(con, pageSize = 100)
con <- as.ba_db(
crop = "soybean",
db="soybeanbase.breedinginsight.net"
)
loc <- brapi::ba_locations(con, pageSize = 100)
con <- as.ba_db(
crop = "soybean",
db="soybeanbase.breedinginsight.net"
)
con
loc <- brapi::ba_locations(con, pageSize = 100)
loc <- brapi::ba_locations(con, pageSize = 10)
brapi::ba_locations(con, pageSize = 10)
set_qbms_config("https://soybeanbase.breedinginsight.net/",
time_out = 300, engine = "breedbase", no_auth = TRUE)
# login using your BMS account (interactive mode)
# or pass your BMS username and password as parameters (batch mode)
login_bms()
# load the QBMS library
library(QBMS)
# config your BMS connection
#set_qbms_config("bms.example.com", 443, "https://")
set_qbms_config("https://soybeanbase.breedinginsight.net/",
time_out = 300, engine = "breedbase", no_auth = TRUE)
# login using your BMS account (interactive mode)
# or pass your BMS username and password as parameters (batch mode)
login_bms()
# list supported crops in the bms server
list_crops()
login_bms()
# list supported crops in the bms server
list_crops()
login_bms()
login_bms()
list_crops()
set_crop("Tutorial1")
set_qbms_config("https://soybeanbase.breedinginsight.net/",
time_out = 3000, engine = "breedbase", no_auth = FALSE)
# login using your BMS account (interactive mode)
# or pass your BMS username and password as parameters (batch mode)
login_bms()
list_crops()
set_qbms_config("soybeanbase.breedinginsight.net",
time_out = 3000, engine = "breedbase", no_auth = FALSE)
# login using your BMS account (interactive mode)
time_out = 3000, engine = "breedbase", no_auth = FALSE)
set_qbms_config("soybeanbase.breedinginsight.net",time_out = 3000, engine = "breedbase", no_auth = FALSE)
# or pass your BMS username and password as parameters (batch mode)
login_bms()
list_crops()
list_crops()
set_qbms_config("soybeanbase.breedinginsight.net",time_out = 3000, engine = "breedbase", no_auth = FALSE)
# login using your BMS account (interactive mode)
# or pass your BMS username and password as parameters (batch mode)
login_bms()
?set_qbms_config
set_qbms_config("https://soybeanbase.breedinginsight.net/",
time_out = 3000, engine = "breedbase", no_auth = FALSE)
# login using your BMS account (interactive mode)
# or pass your BMS username and password as parameters (batch mode)
login_bms()
set_qbms_config("https://breedbase.org/",time_out = 3000, engine = "breedbase", no_auth = FALSE)
login_bms()
list_crops()
login_bms()
list_crops()
?login_bms()
if(!is.null(fixedX) & fixedX != "NULL" & fixedData !="NULL"){
GPModel <- "rrBLUP (rrBLUP)"
Fixed.X <- fixedData[[1]]
Test.X <- fixedData[[2]]
}
TrainData_Table_Num_Filt <- Data_Table_Num_Filt_List[[1]]
TestData_Table_Num_Filt <- Data_Table_Num_Filt_List[[2]]
TestGenoTable <- apply(TestData_Table_Num_Filt[,-1],2,as.numeric)
initCol <- grep("ss",colnames(TrainData_Table_Num_Filt))[1]
finalCol <- grep("ss",colnames(TrainData_Table_Num_Filt))[length(grep("ss",colnames(TrainData_Table_Num_Filt)))]
if(is.null(optTS)){
trainPheno0 <- as.numeric(as.character(TrainData_Table_Num_Filt[,trait]))
geno_012 <- apply(TrainData_Table_Num_Filt[,c(initCol:finalCol)],2,as.numeric)
trainGeno <- apply(geno_012,2,function(x) x-1)
Geno <- as.character(TrainData_Table_Num_Filt[,1])
rownames(trainGeno) <- Geno
}
if(!is.null(optTS)){
strainID <- as.character(TrainData_Table_Num_Filt[,1])
trainSetID <- as.character(as.vector(optTS))
trainIndices <- which(strainID %in% trainSetID)
trainPheno0 <- as.numeric(as.character(TrainData_Table_Num_Filt[trainIndices,trait]))
geno_012 <- apply(TrainData_Table_Num_Filt[trainIndices,c(initCol:finalCol)],2,as.numeric)
trainGeno <- apply(geno_012,2,function(x) x-1)
Geno <- as.character(TrainData_Table_Num_Filt[trainIndices,1])
rownames(trainGeno) <- Geno
}
### Check if the markers are missing in > 99% of the lines
allNAMarkers <- apply(trainGeno,2,function(x) if(length(which(is.na(x)))==nrow(trainGeno)){1}else{0})
allNAMarkerIndices <- which(allNAMarkers!=0)
if(length(allNAMarkerIndices)>=1){
trainGeno0 <- trainGeno[,-allNAMarkerIndices]
}else{ trainGeno0 <- trainGeno}
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
?colSums
print(dim(trainGeno_Imp2))
dim(UCBAdmissions)
rowSums(UCBAdmissions); rowSums(UCBAdmissions, dims = 2)
colSums(UCBAdmissions); colSums(UCBAdmissions, dims = 2)
str(UCBAdmissions)
UCBAdmissions[1:5,]
UCBAdmissions
dim(UCBAdmissions)
rowSums(UCBAdmissions); rowSums(UCBAdmissions, dims = 2)
colSums(UCBAdmissions); colSums(UCBAdmissions, dims = 2)
rowSums(UCBAdmissions)
rowSums(UCBAdmissions,dims=2)
matrix(rep(c(TRUE,FALSE),10),nrow=10,ncol=2)
mLogical <- matrix(rep(c(TRUE,FALSE),10),nrow=10,ncol=2)
colsums(mLogical)
colSums(mLogical)
mLogical <- matrix(rep(c(TRUE,FALSE),10),nrow=5,ncol=4)
colSums(mLogical)
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
library(devtools)
devtools::install_github(‘allogamous/EnvRtype’)
devtools::install_github("allogamous/EnvRtype")
library(EnvRtype)
library(EnvRtype)
data(‘maizeYield’) # phenotype data
data(‘maizeG’) # GRM
data(‘maizeWTH’) # weather data
data("maizeYield")
data("maizeYield") # phenotype data
data("maizeG") # GRM
data("maizeWTH") # weather data
##get_weather fn example
env.data <- get_weather(env.id = ‘NAIROBI’,lat = -1.367,
lon = 36.834, start.day = ‘2015-03-01’,
end.day = ‘2015-04-01’, country = ‘KEN’)
##get_weather fn example
env.data <- get_weather(env.id = "NAIROBI",lat = -1.367,
lon = 36.834, start.day = "015-03-01",
end.day = "2015-04-01", country = "KEN")
\
env.data <- get_weather(env.id = "NAIROBI",lat = -1.367,
lon = 36.834, start.day = "2015-03-01",
end.day = "2015-04-01", country = "KEN")
library(rlang)
unloadNamespace("rlang")
q()
remove.packages("rlang")
library(rlang)
install.packages("rlang")
library(rlang)
install.packages("rlang")
library(rlang)
library(EnvRtype)
data("maizeYield") # phenotype data
data("maizeG") # GRM
data("maizeWTH") # weather data
##get_weather fn example
env.data <- get_weather(env.id = "NAIROBI",lat = -1.367,
lon = 36.834, start.day = "2015-03-01",
end.day = "2015-04-01", country = "KEN")
env.data
str(env.data)
library(shiny); runApp('C:/Users/ivanv/Desktop/GenomicPrediction_Simulator.R')
suppressMessages(library(gplots))
venn( list(A=1:5,B=4:6,C=c(4,8:10)) )
suppressMessages(library(gplots))
venn( list(A=1:5,B=4:6,C=c(4,8:10)) )
v.table<-venn( list(A=1:5,B=4:6,C=c(4,8:10),D=c(4:12)) )
print(v.table)
install.packages("venneuler")
library(venneuler)
A <- c("apple", "banana", "orange")
B <- c("banana", "grape", "pear")
C <- c("apple", "pear")
mysets <- list(A, B, C)
venn <- venneuler(mysets)
plot(venn)
mysets <- do.call(cbind,list(A, B, C))
mysets
###
venn <- venneuler(mysets)
plot(venn)
runApp('C:/Users/ivanv/Desktop/GenomicPrediction_Simulator.R')
runApp('C:/Users/ivanv/Desktop/GenomicPrediction_Simulator.R')
runApp('C:/Users/ivanv/Desktop/GenomicPrediction_Simulator.R')
runApp('C:/Users/ivanv/Desktop/GenomicPrediction_Simulator.R')
?BGLR
runApp('C:/Users/ivanv/Desktop/GenomicPrediction_Simulator.R')
runApp('chatGPT_ShinyApp.R')
install.packages("openai")
install.packages("openai")
library(shiny)
library(openai)
openai_api_key("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")
library(openai)
Sys.setenv("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")
Sys.setenv(OPENAI_API_KEY="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")
Sys.getenv("OPENAI_API_KEY")
?completion
?openai::create_completion
runApp('chatGPT_ShinyApp.R')
runApp('chatGPT_ShinyApp.R')
runApp('chatGPT_ShinyApp.R')
?verbatimTextOutput
runApp('chatGPT_ShinyApp.R')
runApp('chatGPT_ShinyApp.R')
runApp('chatGPT_ShinyApp.R')
runApp('chatGPT_ShinyApp.R')
runApp('chatGPT_ShinyApp.R')
runApp('chatGPT_ShinyApp.R')
runApp('chatGPT_ShinyApp.R')
require(devtools)
install_github("MichelNivard/gptstudio")
install.packages("devtools")
require(devtools)
install_github("MichelNivard/gptstudio")
library(gptstudio)
Sys.getenv("OPENAI_API_KEY")
observeEvent(input$user_input, {
response <- create_completion(
#prompt = input$user_input,
prompt <- "Tell me about your Shiny app.",
model = "text-davinci-002",
max_tokens = 50,
temperature = 0.7,
openai_api_key = Sys.getenv("OPENAI_API_KEY")
)
output$bot_response <- renderText(response$choices$text)
})
library(openapi)
library(openai)
library(gptstudio)
1 + 1
library(gptstudio)
dat <- iris
install.packages("esquisse")
gptstudio:::chat_gpt_addin()
library(gptstudio)
library(esquisse)
library(esquisse)
library(fgsea)
install.packages("fgsea")
library(fgsea)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea",force=TRUE)
remove.packages("tibble")
remove.packages("vctrs")
remove.packages("cli")
remove.packages("dplyr")
remove.packages("rlang")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea",force=TRUE)
library(fgsea)
unloadNamespace("rlang")
q()
library()
unloadNamespace("rlang")
remove.packages("rlang")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea",force=TRUE)
BiocManager::install("fgsea",force=TRUE)
unloadNamespace("BiocManager")
BiocManager::install("fgsea",force=TRUE)
library(BiocManager)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea",force=TRUE)
q()
44248-1739
install.packages("clusterProfiler")
library(clusterProfiler)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
?enrichGO
install.packages("goseq")
library(goseq)
#####
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
library(goseq)
install.packages("geneLenDataBase")
BiocManager::install("geneLenDataBase")
BiocManager::install("geneLenDataBase",force=TRUE)
library(goseq)
BiocManager::install("geneLenDataBase",force=TRUE)
BiocManager::install("geneLenDataBase",force=TRUE)
BiocManager::install("geneLenDataBase",force=TRUE)
BiocManager::install("goseq")
BiocManager::install("goseq")
BiocManager::install("geneLenDataBase")
#####
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
rm(list=ls())
#####
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
#####
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
install.packages("topGO")
library(topGO)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("topGO")
q()
setwd("C:/Users/ivanv/Desktop/UMN_GIT/DataShare_Demo/NUST_Data_Inventory")
load("NUST_Trials_StrainsTable.RData")
ls()
infile2 <- "NUST_Geno.vcf"
vcf_file2 <-  infile2
vcf_conn2 <- file(vcf_file2, open = "r")
header <- c()
while (TRUE) {
line <- readLines(vcf_conn2, n = 1)
if (startsWith(line, "##")) {
header<- c(header,line)
next
} else {
#Once we reach the information row, break out of the loop
info_row <- line
break
}
}
# Read in the data in the VCF file, starting from the information row
vcf_data2 <- read.table(vcf_conn2, header = FALSE)
close(vcf_conn2)
# Print the information row and the first few rows of the VCF data
colnames(vcf_data2) <- unlist(strsplit(info_row,"\t"))
head(vcf_data2)
###########################
NUST_6K_Geno_a1 <- vcf_data2
dim(NUST_6K_Geno_a1)
infileVCF <- "Lorenz_Project_010.vcf"
# Set the file path to the VCF file
vcf_file <- infileVCF
# Open a connection to the VCF file and skip the meta info lines
vcf_conn <- file(vcf_file, open = "r")
header <- c()
while (TRUE) {
line <- readLines(vcf_conn, n = 1)
if (startsWith(line, "##")) {
header<- c(header,line)
next
} else {
# Once we reach the information row, break out of the loop
info_row <- line
break
}
}
# Read in the data in the VCF file, starting from the information row
vcf_data <- read.table(vcf_conn, header = FALSE)
close(vcf_conn)
# Print the information row and the first few rows of the VCF data
colnames(vcf_data) <- unlist(strsplit(info_row,"\t"))
head(vcf_data)
Lore010Geno <- vcf_data
Lore010_AccessionsList <- colnames(vcf_data)[10:ncol(vcf_data)]
chrom <- unlist(lapply(Lore010Geno$ID,function(x) strsplit(x,"_")[[1]][1]))
Pos <- unlist(lapply(Lore010Geno$ID,function(x) strsplit(x,"_")[[1]][2]))
ref <- unlist(lapply(Lore010Geno$ID,function(x) strsplit(x,"_")[[1]][3]))
alt <- unlist(lapply(Lore010Geno$ID,function(x) strsplit(x,"_")[[1]][4]))
Lore010Geno$`#CHROM` <- chrom
Lore010Geno$POS <- Pos
Lore010Geno$REF <- ref
Lore010Geno$ALT <- alt
Lore010Geno$`uniqID-a1` <- paste(Lore010Geno$`#CHROM`,Lore010Geno$POS,sep="-")
####
####
NUST_6K_Geno_a1 <- read.table("NUST_Geno_a1_INFOCOL",sep=" ",header=T)
Gm09Ind <- which(as.numeric(NUST_6K_Geno_a1$CHROM) <=9)
Gm10Ind <-  which(as.numeric(NUST_6K_Geno_a1$CHROM) >=10)
NUST_6K_Geno_a1$CHROM[Gm09Ind] <- paste("Gm0",NUST_6K_Geno_a1$CHROM[Gm09Ind],sep="")
NUST_6K_Geno_a1$CHROM[Gm10Ind] <- paste("Gm",NUST_6K_Geno_a1$CHROM[Gm10Ind],sep="")
NUST_6K_Geno_a1$`uniqID-a1` <- paste(NUST_6K_Geno_a1$CHROM,NUST_6K_Geno_a1$POS,sep="-")
NUST_6K_Ref_Comb <- merge(NUST_6K_Geno_a1,Lore010Geno,by="uniqID-a1")
Lorenz_010_Geno_a1_v1 <- NUST_6K_Ref_Comb[,c("CHROM","POS.x","ID.x","REF.x","ALT.x",colnames(NUST_6K_Ref_Comb)[12:15], colnames(Lore010Geno)[10:ncol(Lore010Geno)])]
colnames(Lorenz_010_Geno_a1_v1)[1:5] <- c("CHROM","POS","ID","REF","ALT")
Lorenz_010_Geno_a1_v1  <- Lorenz_010_Geno_a1_v1[order(Lorenz_010_Geno_a1_v1$CHROM,Lorenz_010_Geno_a1_v1 $POS),]
Lorenz_010_Geno_a1_v1  <- Lorenz_010_Geno_a1_v1[-which(duplicated(Lorenz_010_Geno_a1_v1$ID)),]
#################################
geneseek_list <- read.csv("geneseek_list_with_alias_CORRECTED_for_CB_17_18_19.csv",header=T)
geneseek_list <- read.csv("geneseek_list_with_alias_CORRECTED_for_CB_17_18_19.csv",header=T)
gencove_list <- read.csv("FIXED_Gencove_ID_lists.csv",header=T)
Lore010IDs <- gsub("[-_ ]","",unlist(lapply(Lore010_AccessionsList,function(x) strsplit(x,"_")[[1]][2])))
gencoveIDs <- gsub("[-_ ]","",gencove_list[,"Alias.pedigree"])
length(which(gencoveIDs %in% Lore010IDs))
CB2019_List <- grep("2019",geneseek_list[,"CORRECTED.Unique.sample.identifier"],value=T)
CB2019_ID <- gsub("[-_ ]","",unlist(lapply(CB2019_List,function(x) strsplit(x,"_")[[1]][2])))
length(which(gencoveIDs %in% CB2019_ID))
CB_List <- grep("201[789]",geneseek_list[,"CORRECTED.Unique.sample.identifier"],value=T)
CB_ID <- gsub("[-_ ]","",unlist(lapply(CB_List,function(x) strsplit(x,"_")[[1]][2])))
length(which(gencoveIDs %in% CB_ID))
length(which(Lore010IDs %in% CB_ID))
lapply(StrainsTable_List,dim)
StrainsTable_List[[nyr]][1:5,"Strain"]
nyr <- 1
StrainsTable_List[[nyr]][1:5,"Strain"]
Years <- c("2022","2021","2020","2019","2018")
StrainsName_List <- list()
for(nyr in 1:length(StrainsTable_List)){
StrainsName_List[[nyr]] <- unique(StrainsTable_List[[nyr]][,"Strain"])
}
lapply(StrainsName_List,length)
gencoveIDsInd <- lapply(StrainsName_List,function(x) which(gencoveIDs %in% x))
gencoveIDsInd[[1]]
gencoveIDsInd <- lapply(StrainsName_List,function(x) which(gencoveIDs %in% x))
gencoveIDsIndLen <- unlist(lapply(gencoveIDsInd,length))
gencoveIDsIndLen
Lore6KDsInd <- lapply(StrainsName_List,function(x) which(Lore010IDs %in% x))
Lore010IDsIndLen <- unlist(lapply(Lore010IDsInd ,length))
Lore010IDsInd <- lapply(StrainsName_List,function(x) which(Lore010IDs %in% x))
Lore010IDsIndLen <- unlist(lapply(Lore010IDsInd ,length))
Lore010IDsIndLen
colnames(NUST_6K_Geno_a1)[10:ncol(NUST_6K_Geno_a1)]
dim(NUST_6K_Geno_a1)
infile2 <- "NUST_Geno.vcf"
vcf_file2 <-  infile2
vcf_conn2 <- file(vcf_file2, open = "r")
header <- c()
while (TRUE) {
line <- readLines(vcf_conn2, n = 1)
if (startsWith(line, "##")) {
header<- c(header,line)
next
} else {
#Once we reach the information row, break out of the loop
info_row <- line
break
}
}
# Read in the data in the VCF file, starting from the information row
vcf_data2 <- read.table(vcf_conn2, header = FALSE)
close(vcf_conn2)
# Print the information row and the first few rows of the VCF data
colnames(vcf_data2) <- unlist(strsplit(info_row,"\t"))
head(vcf_data2)
###########################
NUST_6K_Geno_a1 <- vcf_data2
dim(NUST_6K_Geno_a1)
NUST6KIDs <- colnames(NUST_6K_Geno_a1)[10:ncol(NUST_6K_Geno_a1)]
NUST6KIDs[1:10]
NUST6KIDs[1:10]
StrainsName_List[[1]]
for(nyr in 1:length(StrainsTable_List)){
StrainsName_List[[nyr]] <- gsub("[-_ ]","",unique(StrainsTable_List[[nyr]][,"Strain"]))
}
gencoveIDsInd <- lapply(StrainsName_List,function(x) which(gencoveIDs %in% x))
gencoveIDsIndLen <- unlist(lapply(gencoveIDsInd,length))
NUST6KIDsInd <- lapply(StrainsName_List,function(x) which(NUST6KIDs %in% x))
NUST6KIDsIndLen <- unlist(lapply(NUST6KIDsInd ,length))
Lore010IDsInd <- lapply(StrainsName_List,function(x) which(Lore010IDs %in% x))
Lore010IDsIndLen <- unlist(lapply(Lore010IDsInd ,length))
NUST6KIDs[1:6]
gencoveIDs[1:6]
Lore010IDs[1:6]
NUST_6K_Geno_a1 <- vcf_data2
dim(NUST_6K_Geno_a1)
NUST6KIDs <- gsub("[-_ ]","",colnames(NUST_6K_Geno_a1)[10:ncol(NUST_6K_Geno_a1)])
NUST6KIDs[1:10]
NUST6KIDsInd <- lapply(StrainsName_List,function(x) which(NUST6KIDs %in% x))
NUST6KIDsIndLen <- unlist(lapply(NUST6KIDsInd ,length))
NUST6KIDsIndLen
gencoveIDsInd <- lapply(StrainsName_List,function(x) which(gencoveIDs %in% x))
gencoveIDsIndLen <- unlist(lapply(gencoveIDsInd,length))
NUST6KIDsInd <- lapply(StrainsName_List,function(x) which(NUST6KIDs %in% x))
NUST6KIDsIndLen <- unlist(lapply(NUST6KIDsInd ,length))
Lore010IDsInd <- lapply(StrainsName_List,function(x) which(Lore010IDs %in% x))
Lore010IDsIndLen <- unlist(lapply(Lore010IDsInd ,length))
NUST6KIDsIndLen
Lore010IDsIndLen
gencoveIDsIndLen
names(NUST6KIDsIndLen) <- Years
names(Lore010IDsIndLen) <- Years
names(gencoveIDsIndLen) <- Years
Lore010IDsIndLen
gencoveIDsIndLen
NUST6KIDsIndLen
uniqStrains <- unlist(lapply(StrainsName_List,length))
uniqStrains
sum(gencoveIDsIndLen)
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
