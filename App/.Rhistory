}
}
if(nTrt ==1){
colnames(Fit_Out) <- gsub("Obs",paste(traitME,"Obs",sep=""),colnames(Fit_Out))
colnames(Fit_Out) <- gsub("Pred",paste(traitME,"Pred",sep=""),colnames(Fit_Out))
Fit_Out_Tab <- Fit_Out
}else{
colnames(Fit_Out) <- gsub("Obs",paste(traitME,"Obs",sep=""),colnames(Fit_Out))
colnames(Fit_Out) <- gsub("Pred",paste(traitME,"Pred",sep=""),colnames(Fit_Out))
Fit_Out_Tab <- merge(Fit_Out_Tab,Fit_Out,by="UniqID",all=TRUE)
}
#selOutCols <- c("IDCols","UniqID","Obs")
Fit_Out_Tab_Sel <- Fit_Out_Tab
}
return(Fit_Out_Tab_Sel)
}
b <-  getCombinedTab(outputListSTME(),TraitME(),IDColME())
getCombinedTab <- function(outputListME,TraitME,IDColME){
Models <- c("MM","MDs","MDe")
nTraits <- length(TraitME)
for(nTrt in 1:nTraits){
Pred_Out <- outputListME[[nTrt]]
traitME <- TraitME[nTrt]
Fit_Pred <- Pred_Out[[3]]
nMod <- length(Fit_Pred)
for(nM in 1:nMod){
if(nM==1){
Fit_Out <- Fit_Pred[[nM]]
#Fit_Out_Elmnt_Ln <- apply(Fit_Out,2,function(x) length(unqiue(x)))
#uniqIDCol <- which(Fit_Out_Elmnt_Ln == nrow(Fit_Out))
uniqIDCol <- which(colnames(Fit_Out) == IDColME)
colnames(Fit_Out)[uniqIDCol] <- "UniqID"
colnames(Fit_Out) <- gsub("Obs",paste("Obs",Models[nM],sep="-"),colnames(Fit_Out))
colnames(Fit_Out) <- gsub("Pred",paste("Pred",Models[nM],sep="-"),colnames(Fit_Out))
}else if(nM>1){
Fit_Pred_Tab <- Fit_Pred[[nM]]
# Fit_Pred_Elmnt_Ln <- apply(Fit_Pred_Tab,2,function(x) length(unqiue(x)))
# uniqIDCol <- which(Fit_Pred_Elmnt_Ln == nrow(Fit_Pred_Tab))
uniqIDCol <- which(colnames(Fit_Pred_Tab) == IDColME)
colnames(Fit_Pred_Tab)[uniqIDCol] <- "UniqID"
colnames(Fit_Pred_Tab) <- gsub("Obs",paste("Obs",Models[nM],sep="-"),colnames(Fit_Pred_Tab))
colnames(Fit_Pred_Tab) <- gsub("Pred",paste("Pred",Models[nM],sep="-"),colnames(Fit_Pred_Tab))
Fit_Out <- merge(Fit_Out,Fit_Pred_Tab,by="UniqID",all=TRUE)
}
}
if(nTrt ==1){
colnames(Fit_Out) <- gsub("Obs",paste(traitME,"Obs",sep=""),colnames(Fit_Out))
colnames(Fit_Out) <- gsub("Pred",paste(traitME,"Pred",sep=""),colnames(Fit_Out))
Fit_Out_Tab <- Fit_Out
}else{
colnames(Fit_Out) <- gsub("Obs",paste(traitME,"Obs",sep=""),colnames(Fit_Out))
colnames(Fit_Out) <- gsub("Pred",paste(traitME,"Pred",sep=""),colnames(Fit_Out))
Fit_Out_Tab <- merge(Fit_Out_Tab,Fit_Out,by="UniqID",all=TRUE)
}
#selOutCols <- c("IDCols","UniqID","Obs")
Fit_Out_Tab_Sel <- Fit_Out_Tab
}
return(Fit_Out_Tab_Sel)
}
b <-  getCombinedTab(outputListSTME(),TraitME(),IDColME())
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
outputListSTME <- reactive({ getMEPred(DT_Filt_List(),genoDat_List(),TraitME(),KG=NULL,KE=NULL,KMethod= KGMethod(),FitEnvModels = fitEnvCovs())})
b <- getCombinedTab(outputListSTME(),TraitME(),IDColME())
length(outputListSTME())
length(outputListSTME()[[1]])
length(outputListSTME()[[1]][[1]])
TraitME()
IDColME()
outputListME <- outputListME()
outputListME <- outputListSTME()
TraitME <- TraitME()
IDColME <- IDColME()
Models <- c("MM","MDs","MDe")
nTraits <- length(TraitME)
nTrt <- 1
Pred_Out <- outputListME[[nTrt]]
traitME <- TraitME[nTrt]
Fit_Pred <- Pred_Out[[3]]
nMod <- length(Fit_Pred)
nM <- 1
Fit_Out <- Fit_Pred[[nM]]
#Fit_Out_Elmnt_Ln <- apply(Fit_Out,2,function(x) length(unqiue(x)))
#uniqIDCol <- which(Fit_Out_Elmnt_Ln == nrow(Fit_Out))
uniqIDCol <- which(colnames(Fit_Out) == IDColME)
colnames(Fit_Out)[uniqIDCol] <- "UniqID"
Fit_Out[1:5,]
IDColME
FN <- paste(getwd(),"/GS_Pipeline_Jan_2022_FnsApp.R",sep="")
source(FN)
source("C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App/GS_Pipeline_Jan_2022_FnsApp.R")
outputListSTME <- reactive({ getMEPred(DT_Filt_List(),genoDat_List(),TraitME(),KG=NULL,KE=NULL,KMethod= KGMethod(),FitEnvModels = fitEnvCovs())})
b <-  getCombinedTab(outputListSTME(),TraitME(),IDColME())
outputListSTME[[1]][[3]][[1]][1:5,]
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
outputListSTME <- reactive({ getMEPred(DT_Filt_List(),genoDat_List(),TraitME(),KG=NULL,KE=NULL,KMethod= KGMethod(),FitEnvModels = fitEnvCovs())})
b <- getCombinedTab(outputListSTME(),TraitME(),IDColME())
dim(b)
b[1:5,]
IDColsME()
which(colnames(b) %in% IDColsME())
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
plotEnvKData(plotEnvRel(EnvK()))
envData()
dim(envData())
finalData <- envData()
idCol <- which(colnames(final_data) %in% "ID")
final_data <- envData()
idCol <- which(colnames(final_data) %in% "ID")
if(length(idCol)>0) { final_data_V2 <- final_data[,-idCol]}else{final_data_V2 <- final_data}
idCol
final_data_V2 <- final_data[,-idCol]
final_data_V2[1:5,]
dim(final_data_V2)
(final_data_V2[1:5,9:18])
(final_data_V2[1:5,9:19])
(final_data_V2[1:5,9:18])
envData() <- final_data_V2
envData(final_data_V2)
envData  <- reactive(final_data_V2)
dim(envData())
processWthDat()
gaussVar()
EnvK <- reactive( getEnvKernel(envData(),processWthDat(),gaussVar())}))
getEnvKernel <- function(Env.Data,process=FALSE,Gaussian=FALSE){
env.Dat <- Env.Data
if(process==FALSE){
wthVarCols <- c(9:18)
var3 <- colnames(env.Dat)[wthVarCols]
EC.Dat = EnvRtype::W_matrix(env.data = env.Dat,env.id="env", var.id = var3)
KE <- list(W = EnvRtype::env_kernel(env.data = EC.Dat,gaussian=Gaussian)[[2]])
}else if(process==TRUE){
prData <- processWTH(env.data = env.Dat)
var4 = as.vector(colnames(prData)[9:29])
EC.Dat.Pr = EnvRtype::W_matrix(env.data = prData,env.id="env", var.id = var4)
rmECVar <- which(apply(EC.Dat.Pr,2,function(x) length(which(x %in% NaN)))!=0)
EC.Dat.Pr.Filt <- EC.Dat.Pr[,-rmECVar]
KE = list(W = env_kernel(env.data = EC.Dat.Pr.Filt,gaussian=Gaussian)[[2]])
}
return(KE)
}
EnvK <- getEnvKernel(envData(),processWthDat(),gaussVar())
EnvK
EnvK <- getEnvKernel(envData()[,-19],processWthDat(),gaussVar())
EnvK
getEnvKernel()
getEnvKernel
EnvK <- getEnvKernel(envData(),processWthDat(),gaussVar())
EnvK
env.Dat <- envData()
Gaussian <- gaussVar()
wthVarCols <- c(9:18)
var3 <- colnames(env.Dat)[wthVarCols]
var3
EC.Dat = EnvRtype::W_matrix(env.data = env.Dat,env.id="env", var.id = var3)
dim(EC.Dat)
EC.Dat
KE <- list(W = EnvRtype::env_kernel(env.data = EC.Dat,gaussian=Gaussian)[[2]])
KE
wthVarCols <- c(9:17)
var3 <- colnames(env.Dat)[wthVarCols]
var3
EC.Dat = EnvRtype::W_matrix(env.data = env.Dat,env.id="env", var.id = var3)
KE <- list(W = EnvRtype::env_kernel(env.data = EC.Dat,gaussian=Gaussian)[[2]])
KE
var3
var3 <- c("T2M""T2M_MAX","T2M_MIN","PRECTOT","WS2M","RH2M","T2MDEW","ALLSKY_SFC_LW_DWN" "ALLSKY_SFC_SW_DWN")
var3 <- c("T2M","T2M_MAX","T2M_MIN","PRECTOT","WS2M","RH2M","T2MDEW","ALLSKY_SFC_LW_DWN" "ALLSKY_SFC_SW_DWN")
var3 <- c("T2M","T2M_MAX","T2M_MIN","PRECTOT","WS2M","RH2M","T2MDEW","ALLSKY_SFC_LW_DWN","ALLSKY_SFC_SW_DWN")
EC.Dat = EnvRtype::W_matrix(env.data = env.Dat,env.id="env", var.id = var3)
KE <- list(W = EnvRtype::env_kernel(env.data = EC.Dat,gaussian=Gaussian)[[2]])
KE
EnvK <- reactive({KE})
plotEnvKData(plotEnvRel(EnvK()))
prWH <- processWTH(env.Dat)
prWH <- EnvRtype::processWTH(env.Dat)
prWH[1:5,]
dim(prWH)
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
dev.off()
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('Hmp_Test.R')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('Hmp_Test.R')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('Hmp_Test.R')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
q()
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
dev.off()
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
?withProgress
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App_Work/App')
runApp('MobaXterm/home/MEVersion/SoyGen2App/App')
runApp('Hmp_Test.R')
runApp('Hmp_Test.R')
runApp('Hmp_Test.R')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
callr::r_bg(function(getME_CV,DT_1_Filt_List,genoDat_List,traits,KG,KE,CVMet,factVar,k,niter,KMethod,FitEnvModels,fixedME,envVar,IDColsME,IDColME,LocME,YrME,temp_file6_path,FN) {
library(BGLR)
library(BGGE)
library(EnvRtype)
library(foreach)
library(doParallel)
registerDoParallel(5)
source(FN)
sink(temp_file6_path)
result <- getME_CV(DT_1_Filt_List,genoDat_List,traits,KG,KE,CVMet,factVar,k,niter,KMethod,FitEnvModels,fixedME,envVar,IDColsME,IDColME,LocME,YrME)
sink()
result
}, args = list(
getME_CV = getME_CV,
DT_1_Filt_List = DT_Filt_List(),
genoDat_List = genoDat_List(),
traits = TraitME(),
KG = NULL,
KE= NULL,
CVMet= CVMet(),
factVar= factVar(),
k= kCV(),
niter=nIterCV(),
KMethod= "GK",
FitEnvModels= fitEnvCovs(),
fixedME= fixMECV(),
envVar= varEnvCV(),
IDColsME= IDColsME(),
IDColME= IDColME(),
LocME= LocationMECV(),
YrME=YearMECV(),
temp_file6_path = temp_file6(),
FN=FN
), stdout = temp_file6(), stderr = temp_file6())
observeEvent(input$CrossValidationME,{
YearMECV <- reactive(input$YearMECV)
LocationMECV <- reactive(input$LocationMECV)
fixMECV <- reactive(input$fixedMECV)
varEnvCV <- reactive(input$EnvVarIDCV)
processComplete6 <- reactiveVal(FALSE)
MECV_Out <- reactiveVal(NULL)
temp_file6 <- reactiveVal('none')
})
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('MobaXterm/home/MEVersion/SoyGen2App/App')
267.51 *2
267.51 *2
267.51*2
267.51*2
2*2
1+!
!!
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
length(outputListPhME())
plotRenderList()
length(plotRenderList())
nSelTraitsME()
length(plotRenderList())
length(outputListPhME())
nSelTraitsME()
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
nSelTraitsME()
nSelTraitsME()
lapply(1:nSelTraitsME(), function(i) {
outputListPhME()[[noquote(paste("'","distPlot",i,"'",sep=""))]] <- plotRenderList()[[i]]
# outputListPhME()[[paste0("distPlot", i)]] <- plotRenderList()[[i]]
})
lapply(1:nSelTraitsME(), function(i) {
# outputListPhME()[[noquote(paste("'","distPlot",i,"'",sep=""))]] <- plotRenderList()[[i]]
outputListPhME()[[i]] <- plotRenderList()[[i]]
# outputListPhME()[[paste0("distPlot", i)]] <- plotRenderList()[[i]]
})
outputListPhME()
outputListPhME <- reactive({
if(nSelTraitsME()>1){
lapply(1:nSelTraitsME(), function(i) {
plotOutput(noquote(paste("'","distPlot",i,"'",sep="")))
})
}
})
outputListPhME()
plotRenderList <- reactive({
if (nSelTraitsME() > 1){
print("plLD_Mult")
lapply(1:nSelTraitsME(), function(i) {
renderPlot({
plotData()[[i]]
})
})
}
# else {
#   list(renderPlot({NULL}))
# }
})
plotRenderList()
if(nSelTraitsME()>1 & length(plotRenderList()) >1 & length(outputListPhME()) >1){
lapply(1:nSelTraitsME(), function(i) {
# outputListPhME()[[noquote(paste("'","distPlot",i,"'",sep=""))]] <- plotRenderList()[[i]]
outputListPhME()[[i]] <- plotRenderList()[[i]]
# outputListPhME()[[paste0("distPlot", i)]] <- plotRenderList()[[i]]
})
}
outputListPhME()
length( outputListPhME())
length( outputListPhME())
lapply(1:nSelTraitsME(), function(i) {
outputListPhME()[[noquote(paste("'","distPlot",i,"'",sep=""))]] <- plotRenderList()[[i]]
# outputListPhME()[[paste0("distPlot", i)]] <- plotRenderList()[[i]]
})
lapply(1:nSelTraitsME(), function(i) {
# outputListPhME()[[noquote(paste("'","distPlot",i,"'",sep=""))]] <- plotRenderList()[[i]]
outputListPhME()[[i]] <- plotRenderList()[[i]]
# outputListPhME()[[paste0("distPlot", i)]] <- plotRenderList()[[i]]
})
outputListPhME()
plotRenderList()[[i]]
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
shiny::runApp('MobaXterm/home/Soygen2App_Work/SoyGen2App/App')
runApp('MobaXterm/home/Soygen2App_Work/SoyGen2App/App')
library(reticulate)
py_config()
py_config()
py_discover_config()
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
getwd()
infileVCF <- "C:/Users/ivanv/Downloads"
infileVCF <- "C:/Users/ivanv/Downloads/VP_50K_A4_V2_from_Merged.vcf"
library(rTASSEL)
getTasObj <- function(infileVCF){
tasGeno <- rTASSEL::readGenotypeTableFromPath(
path = infileVCF,
sortPositions=TRUE
)
return(tasGeno)
}
genoTas <- getTasObj(infileVCF)
genoTas
getGenoData_API <- function(FiltGeno){
filtGenoMat <- as.matrix(FiltGeno)
filtGenoMat[is.na(filtGenoMat)] <- 9
currentGenoMat <- cbind.data.frame(rownames(filtGenoMat),filtGenoMat)
tableReport <- rJava::new(
rJava::J("net.maizegenetics.dna.map.PositionListTableReport"),
FiltGeno %>% rTASSEL:::getPositionList()) %>%
rTASSEL:::tableReportToDF() %>% as.data.frame()
varSplit <- strsplit(tableReport[,"VARIANT"],"/")
varSplitTab <- cbind.data.frame(unlist(lapply(varSplit,function(x) x[1])),unlist(lapply(varSplit,function(x) x[2])))
vcfIDTab <- cbind.data.frame(tableReport[,c("Name","Chromosome","Position")],varSplitTab)
colnames(vcfIDTab) <- c("SNPID","Chrom","Position","REF","ALT")
# print(dim(vcfIDTab))
# print(is.data.frame(vcfIDTab))
write.table(vcfIDTab,"currentVCFIDTab.txt",quote=FALSE,sep="\t",row.names=FALSE,col.names=TRUE)
write.table(currentGenoMat,"current_GenoTable.genotypes",quote=FALSE,sep=" ",row.names=FALSE,col.names=FALSE)
return(vcfIDTab)
}
genoAPI <- getGenoData_API(genoTas)
FiltGeno <- tasGeno
FiltGeno <- genoTas
filtGenoMat <- as.matrix(FiltGeno)
FiltGeno
filtGenoMat <- as.matrix(FiltGeno)
unloadNamespace("rTASSEL")
remove.packages("rTASSEL")
library(devtools)
devtools::install_github("maize-genetics/rTASSEL")
devtools::install_github("maize-genetics/rTASSEL")
library(rTASSEL)
infileVCF <- "C:/Users/ivanv/Downloads/VP_50K_A4_V2_from_Merged.vcf"
getTasObj <- function(infileVCF){
tasGeno <- rTASSEL::readGenotypeTableFromPath(
path = infileVCF,
sortPositions=TRUE
)
return(tasGeno)
}
genoTas <- getTasObj(infileVCF)
genoTas
FiltGeno <- genoTas
filtGenoMat <- as.matrix(FiltGeno)
infileVCF <- "C:/Users/ivanv/Downloads/TP50K_VP1K_A4_V2.vcf"
genoTas <- getTasObj(infileVCF)
genoTas
FiltGeno <- genoTas
filtGenoMat <- as.matrix(FiltGeno)
str(FiltGeno)
str(FiltGeno)
filtGenoMat <- as.matrix(FiltGeno)
summary(filtGenoMatt)
summary(filtGenoMat)
summary(FiltGeno)
summary(FiltGeno)
filtGenoMat <- as.matrix(FiltGeno)
genoTable <- genoTas$getGenotypeTable()
genoTas
infileVCF_TP50 <- "C:/Users/ivanv/Downloads/TP_50K_A4.vcf"
infileVCF_TP50
infileVCF_TP50 <- "C:/Users/ivanv/Downloads/TP_50K_A4_V2.vcf"
genoTas_TP50 <- getTasObj(infileVCF_TP50)
genoTas_TP50
FiltGeno <- genoTas_TP50
filtGenoMat <- as.matrix(FiltGeno)
list1 <- list(1, 2, 3)
list2 <- list(4, 5, 6)
list3 <- list(list1, list2)
# Flatten the list3 to get a single list with all elements
flattened_list <- unlist(list3, recursive = FALSE)
flattened_list
list3
if(!require(shiny)){
install.packages("shiny")
}
if(!require(shinyBS)){
install.packages("shinyBS")
}
if(!require(shinyjs)){
install.packages("shinyjs")
}
if(!require(shinyWidgets)){
install.packages("shinyWidgets")
}
if(!require(reticulate)){
install.packages("reticulate")
}
if(!require(renv)){
install.packages("renv")
}
library(shiny)
library(shinyjs)
library(shinyBS)
library(shinyWidgets)
library(reticulate)
library(renv)
renv::init()
setwd("C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App/")
setwd("C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App/")
renv::init()
renv::init()
renv::use_python()
reticulate::use_virtualenv("C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App/renv/python/virtualenvs/renv-python-3.12")
virtualenv_install("C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App/renv/python/virtualenvs/renv-python-3.12","numba")
library(reticulate)
reticulate::use_virtualenv("C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App/renv/python/virtualenvs/renv-python-3.12")
virtualenv_install("C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App/renv/python/virtualenvs/renv-python-3.12","numba")
virtualenv_install("C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App/renv/python/virtualenvs/renv-python-3.12","C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/AlphaPlantImpute2/alphaplantimpute2-1.5.3-py3-none-any.whl")
renv::status()
renv::install("BiocVersion")
renv::install("rTASSEL")
install.packages("BiocVersion")
install.packages("BiocManager")
BiocManager::install("BiocVersion")
library(rJava)
devtools::install_github("maize-genetics/rTASSEL")
library(rTASSEL)
q()
