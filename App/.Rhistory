parGenoTable <- pullMarkerGeno(pop, markers=markerNames, simParam=SP)
Ped <- getPed(F4Pop)
### Combine Parent and Progeny Genotype Tables
combGenoTable <- rbind(parGenoTable,genoTable)
simPop <- list(combGenoTable,Ped)
##
combGenoTable <- simPop[[1]]
Ped <- simPop[[2]]
LDIndx <- which(rownames(combGenoTable) %in% Ped[,1])
length(LDIndx)
HDMarkerDensity <- ncol(combGenoTable)
LDMarkerDensity <- 1000
getMaskedPops <- function(genoTable,HDMarkerDensity,LDMarkerDensity,LDIndx,nrep){
set.seed(125+nrep)
ind <- sample(c(1:HDMarkerDensity),(HDMarkerDensity-LDMarkerDensity))
genoTable_msk <- genoTable
genoTable_msk[LDIndx,ind] <- NA
return(genoTable_msk)
}
nrep <- 1
combGenotable_msk <- getMaskedPops(combGenoTable,HDMarkerDensity,LDMarkerDensity,LDIndx,nrep)
## Checks
NALen <- apply(combGenotable_msk,1,function(x)length(which(is.na(x))))
table(NALen)
### Complete Genotype
combGenoTable_AB_True <- apply(combGenoTable,2,function(x) gsub("2","AA",x))
combGenoTable_AB_True <- apply(combGenoTable_AB_True,2,function(x) gsub("0","BB",x))
combGenoTable_AB_True <- apply(combGenoTable_AB_True,2,function(x) gsub("1","AB",x))
rownames(combGenoTable_AB_True) <- rownames(combGenoTable)
SimPop1GenoTable_True <- cbind(InfoCols50K,t(combGenoTable_AB_True))
ChrLength <- read.table("Gm_1-20_Length_bp")
ChrLength$V2 <- gsub("Gm[0]*","",ChrLength$V2)
ChrLength$V2 <- as.numeric(gsub(":","",ChrLength$V2))
InfoCols <- as.data.frame(rep(0,nSegSites*nChrom))
InfoCols$Chrom <- unlist(lapply(c(1:nChrom),function(x) rep(x,nSegSites)))
InfoCols$Pos <- unlist(lapply(c(1:nChrom),function(x){
nPos <- as.numeric(ChrLength[ChrLength$V2==x,"V3"])
return(sample(c(1:nPos),nSegSites))
}))
InfoCols_Sort <- InfoCols[order(InfoCols$Chrom,InfoCols$Pos),]
InfoCols_Sort$SNPID <- unlist(lapply(c(1:nChrom),function(x) paste(x,c(1:nSegSites),sep="_")))
InfoCols_Sort$REF <- sample(c("A","T","G","C"),nSegSites*nChrom,replace=T)
InfoCols_Sort$ALT <- unlist(lapply(InfoCols_Sort$REF,function(x)sample(setdiff(c("A","T","G","C"),x),1)))
InfoCols50K <- InfoCols_Sort[,-1]
dim(InfoCols50K)
rownames(combGenoTable_AB_True) <- rownames(combGenoTable)
SimPop1GenoTable_True <- cbind(InfoCols50K,t(combGenoTable_AB_True))
colnames(SimPop1GenoTable_True)[1:5] <- c("Chrom","Position","SNPID","REF","ALT")
#### Prepare TRUE Genotypes PED for Alphaplantimpute
SimPop1GenoTable_Nt_True <- t(apply(SimPop1GenoTable_True,1,function(x) gsub("AA",paste(x[4],x[4],sep=" "),x)))
SimPop1GenoTable_Nt_True <- t(apply(SimPop1GenoTable_Nt_True,1,function(x) gsub("BB",paste(x[5],x[5],sep=" "),x)))
SimPop1GenoTable_Nt_True <- t(apply(SimPop1GenoTable_Nt_True,1,function(x) gsub("AB",paste(x[4],x[5],sep=" "),x)))
SimPop1GenoTable_Nt_True <- t(apply(SimPop1GenoTable_Nt_True,1,function(x) gsub("NA","0 0",x)))
individualID <- colnames(SimPop1GenoTable_Nt_True)[c(6:ncol(SimPop1GenoTable_Nt_True))]
nLines <- length(individualID)
IDCols_PED <- cbind(rep(0,nLines),individualID,rep(0,nLines),rep(0,nLines),rep(0,nLines),rep(0,nLines))
SimPop1GenoTable_PED_True <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt_True[,c(6:ncol(SimPop1GenoTable_Nt_True))]))
write.table(SimPop1GenoTable_PED_True,"SimPop1GenoTable50K_True.ped",col.names = FALSE,quote=FALSE,row.names = FALSE,sep=" ")
### SimPop1GenoTable
combGenoTable_AB <- apply(combGenotable_msk,2,function(x) gsub("2","AA",x))
combGenoTable_AB <- apply(combGenoTable_AB,2,function(x) gsub("0","BB",x))
combGenoTable_AB <- apply(combGenoTable_AB,2,function(x) gsub("1","AB",x))
rownames(combGenoTable_AB) <- rownames(combGenoTable)
dim(combGenoTable_AB)
SimPop1GenoTable <- cbind.data.frame(InfoCols50K,t(combGenoTable_AB))
colnames(SimPop1GenoTable)[1:5] <- c("Chrom","Position","SNPID","REF","ALT")
SimPop1GenoTable_Sort <-SimPop1GenoTable[order(SimPop1GenoTable$Chrom,SimPop1GenoTable$Position),]
ls()
save(SimPop1GenoTable_Sort,file="SimPop1GenoTable_Sort.RData")
#### Prepare PED for Alphaplantimpute Masked Set
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Sort,1,function(x) gsub("AA",paste(x[4],x[4],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("BB",paste(x[5],x[5],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("AB",paste(x[4],x[5],sep=" "),x)))
SimPop1GenoTable_Nt <- t(apply(SimPop1GenoTable_Nt,1,function(x) gsub("NA","0 0",x)))
individualID <- colnames(SimPop1GenoTable_Nt)[c(6:ncol(SimPop1GenoTable_Nt))]
nLines <- length(individualID)
IDCols_PED <- cbind(rep(0,nLines),individualID,rep(0,nLines),rep(0,nLines),rep(0,nLines),rep(0,nLines))
SimPop1GenoTable_PED <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt[,c(6:ncol(SimPop1GenoTable_Nt))]))
SimPop1GenoTable_PED_True <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt_True[,c(6:ncol(SimPop1GenoTable_Nt_True))]))
write.table(SimPop1GenoTable_PED_True,"SimPop1GenoTable50K_True.ped",col.names = FALSE,quote=FALSE,row.names = FALSE,sep=" ")
SimPop1GenoTable_Nt_True[1:5,1:100]
SimPop1GenoTable_Nt[1:5,1:100]
SimPop1GenoTable_Nt[1:5,1:10]
SimPop1GenoTable_Nt_True[1:5,1:10]
identical(SimPop1GenoTable_Nt[1:300,],SimPop1GenoTable_Nt_True[1:300,])
identical(SimPop1GenoTable_Nt[1:300,-c(1:5)],SimPop1GenoTable_Nt_True[1:300,-c(1:5)])
identical(SimPop1GenoTable_Nt[1:300,-c(1:5)],SimPop1GenoTable_Nt_True[1:300,-c(1:5)])
identical(SimPop1GenoTable_Nt[1:300,-c(1:5)],SimPop1GenoTable_Nt_True[1:300,-c(1:5)])
SimPop1GenoTable_Nt_True[,"REF"]-SimPop1GenoTable_Nt[,"REF"]
length(which(SimPop1GenoTable_Nt_True[,"REF"]==SimPop1GenoTable_Nt[,"REF"]))
length(which(SimPop1GenoTable_Nt_True[,"ALT"]==SimPop1GenoTable_Nt[,"ALT"]))
length(which(SimPop1GenoTable_Nt_True[,6]==SimPop1GenoTable_Nt[,6]))
dim(SimPop1GenoTable_Nt_True)
identical(SimPop1GenoTable_Nt[,6:305],SimPop1GenoTable_Nt_True[,6:305])
individualID <- colnames(SimPop1GenoTable_Nt)[c(6:ncol(SimPop1GenoTable_Nt))]
nLines <- length(individualID)
IDCols_PED <- cbind(rep(0,nLines),individualID,rep(0,nLines),rep(0,nLines),rep(0,nLines),rep(0,nLines))
SimPop1GenoTable_PED <- cbind(IDCols_PED,t(SimPop1GenoTable_Nt[,c(6:ncol(SimPop1GenoTable_Nt))]))
write.table(SimPop1GenoTable_PED,"SimPop1GenoTable50K.ped",col.names = FALSE,quote=FALSE,row.names = FALSE,sep=" ")
q()
source("http://www.bioconductor.org/biocLite.R")
library(BiocManager)
BiocManager::install("GenomicRanges",force=TRUE)
install.packages("BiocManager")
library(BiocManager)
install.packages(c("aplot", "arrow", "ASRgenomics", "curl", "datamods", "dbplyr", "digest", "dplyr", "DT", "evaluate", "FactoMineR", "fansi", "fs", "gdtools", "gert", "ggplot2", "ggrepel", "graphlayouts", "htmltools", "lme4", "lubridate", "markdown", "matrixStats", "minqa", "openssl", "pkgload", "plyr", "polyclip", "prettyunits", "primes", "processx", "promises", "purrr", "ragg", "raster", "Rcpp", "reactR", "reticulate", "rio", "shiny", "sp", "systemfonts", "tensorflow", "terra", "testthat", "textshaping", "tinytex", "vctrs", "vroom", "withr", "xfun", "yulab.utils"))
q()
q()
library(reticulate)
reticulate::install_python(version = 'python3.12.0')
library(reticulate)
reticulate::install_python(version = 'python3.11.0')
reticulate::virtualenv_create("pyEnv", python = "python3.12.0")
reticulate::install_python(version = 'python3.12.0')
reticulate::install_python(version = 'python3.12.0')
library(reticulate)
reticulate::virtualenv_create("pyEnv", python = "python3.12.0")
reticulate::install_python(version = '3.12.0')
reticulate::virtualenv_create("pyEnv", python = "python3.12.0")
reticulate::virtualenv_create("pyEnv", python = "3.12.0")
reticulate::virtualenv_install("pyEnv",c("numpy","pandas"))
reticulate::use_virtualenv("pyEnv", required = TRUE)
getwd()
reticulate::py_install("./alphaplantimpute2-1.5.3-py3-none-any.whl")
reticulate::virtualenv_create("pyEnv", python = "3.10.0")
reticulate::virtualenv_install("pyEnv",c("numpy","pandas"))
reticulate::use_virtualenv("pyEnv", required = TRUE)
reticulate::py_install("./alphaplantimpute2-1.5.3-py3-none-any.whl")
reticulate::virtualenv_create("pyEnv", python = "3.10.0")
reticulate::virtualenv_remove("pyEnv")
Y
reticulate::virtualenv_create("pyEnv", python = "3.10.0")
reticulate::virtualenv_install("pyEnv",c("numpy","pandas"))
reticulate::use_virtualenv("pyEnv", required = TRUE)
reticulate::py_install("alphaplantimpute2-1.5.3-py3-none-any.whl")
reticulate::py_run_string("import AlphaPlantImpute2")
reticulate::py_run_string("AlphaPlantImpute2")
reticulate::py_run_string("import AlphaPlantImpute2")
reticulate::py_run_string("import AlphaPlantImpute2")
retculate::import("AlphaPlantImpute2")
reticulate::import("AlphaPlantImpute2")
reticulate::import("AlphaPlantImpute2")
reticulate::import(AlphaPlantImpute2)
py
py_module_available("numpy")
py_module_available("AlphaPlantImpute2")
reticulate::import("alphaplantimpute2)
""
)
""
reticulate::import("alphaplantimpute2")
py_module_available("alphaplantimpute2")
reticulate::py_run_string("alphaplantimpute2")
alphaplantimpute2
reticulate::py_run_string("alphaplantimpute2.alphaplantimpute2()")
reticulate::py_run_string("alphaplantimpute2.alphaplantimpute2")
import("alphaplantimpute2")
reticulate::py_run_string("alphaplantimpute2.alphaplantimpute2")
reticulate::py_run_string("output=alphaplantimpute2.alphaplantimpute2")
result= reticulate::py_run_string("output=alphaplantimpute2.alphaplantimpute2()")
result= reticulate::py_run_string("output=alphaplantimpute2.alphaplantimpute2()")
repl_python()
alphaplantimpute2
import alphaplantimpute2
alphaplantimpute2
exit()
exit
import("alphaplantimpute2")
functions_list = dir(alphaplantimpute2)
import("alphaplantimpute2")
functions_list = dir(alphaplantimpute2)
functions_list = dir("alphaplantimpute2")
print(functions_list)
functions_list <- py_run_string("dir(alphaplantimpute2)")
print(functions_list)
functions_list <- py_run_string("dir(alphaplantimpute2)")
functions_list <- py$dir(alphaplantimpute2)
functions_list <- py_run_string("dir(alphaplantimpute2)")
> functions_list <- py$dir(alphaplantimpute2)
functions_list <- py$dir(alphaplantimpute2)
alphaplantimpute2 <- import("alphaplantimpute2")
functions_list <- py_run_string("dir(alphaplantimpute2)")$result
print(functions_list)
functions_list
alphaplantimpute2
alphaplantimpute2
reticulate::py_install("alphaplantimpute2-1.5.3-py3-none-any.whl")
reticulate::py_install("alphaplantimpute2-1.5.3-py3-none-any.whl",ignore_installed = TRUE)
alphaplantimpute2
alphaplantimpute2
reticulate::py_install("alphaplantimpute2-1.5.3-py3-none-any.whl")
reticulate::use_virtualenv("pyEnv", required = TRUE)
py_module_available("alphaplantimpute2")
alphaplantimpute2
repl_python()
import alphaplantimpute2
alphaplantimpute2.`__package__`
dir(alphaplantimpute2)
import pkgutil
import alphaplantimpute2  # The namespace package
for importer, modname, ispkg in pkgutil.iter_modules(alphaplantimpute2.__path__):
full_module_name = 'alphaplantimpute2.' + modname
if ispkg:
__import__(full_module_name)
full_module_name
import alphaplantimpute2.alphaplantimpute2 as api2
api2.main()
api2.create_library()
api2.main()
import os
os.curdir
os.curdir.find()
os.getcwd()
import sys
import alphaplantimpute2.alphaplantimpute2 as api2
# Backup the original sys.argv
original_argv = sys.argv
# Construct the argument list
sys.argv = ['alphaplantimpute2', '-impute', '-out', 'SimPop16K_Imp','-founders','SimPop9GenoTable6K_Founders.txt' ,'-genotypes', 'SimPop1GenoTable6K_Msk_750_10.genotypes', '-libphase', 'lib.phase']
# Call the main function with the provided arguments
try:
api2.main()
except SystemExit as e:
# Handle the SystemExit exception to prevent the script from being terminated
print(f"Exited with code {e.code}")
# Restore the original sys.argv
sys.argv = original_argv
exit
import("alphaplantimpute2.alphaplantimpute2")
import("alphaplantimpute2.alphaplantimpute2",as = "api2")
api2
import("alphaplantimpute2.alphaplantimpute2",as = api2)
import("alphaplantimpute2.alphaplantimpute2",as = 'api2')
api2
import("alphaplantimpute2.alphaplantimpute2")
alphaplantimpute2.alphaplantimpute2
api2=import("alphaplantimpute2.alphaplantimpute2")
api2
api2$main
api2$main()
api2$main('alphaplantimpute2', '-impute', '-out=SimPop16K_Imp_R','-founders=SimPop9GenoTable6K_Founders.txt' ,'-genotypes=SimPop1GenoTable6K_Msk_750_10.genotypes', '-libphase=lib.phase')
api2$main('alphaplantimpute2', 'impute', 'out=SimPop16K_Imp_R','founders=SimPop9GenoTable6K_Founders.txt' ,'genotypes=SimPop1GenoTable6K_Msk_750_10.genotypes', '-libphase=lib.phase')
arguments <- list(
option1 = "alphaplantimpute2",
option2 = "impute",
option3 = "out=SimPop16K_Imp_R",
option4 = "founders=SimPop9GenoTable6K_Founders.txt",
option5 = "genotypes=SimPop1GenoTable6K_Msk_750_10.genotypes",
option6 = "-libphase=lib.phase"
)
# Call the main function with the arguments
result <- api2$main(arguments)
result <- api2$main(
"alphaplantimpute2",
"impute",
"out=SimPop16K_Imp_R",
"founders=SimPop9GenoTable6K_Founders.txt",
"genotypes=SimPop1GenoTable6K_Msk_750_10.genotypes",
"-libphase=lib.phase"
)
api2$main()
command <- c(
"python.exe",
"-impute",
"-out=SimPop16K_Imp_R",
"-genotypes=SimPop1GenoTable6K_Msk_750_10.genotypes",
"-libphase=lib.phase"
)
# Call the Python script with system2
system2(command)
api2$main()
api2$main('alphaplantimpute2', 'impute', 'out=SimPop16K_Imp_R','founders=SimPop9GenoTable6K_Founders.txt' ,'genotypes=SimPop1GenoTable6K_Msk_750_10.genotypes', 'libphase=lib.phase')
api2$main('alphaplantimpute2', 'impute', 'out=SimPop16K_Imp_R','founders=SimPop9GenoTable6K_Founders.txt' ,'genotypes=SimPop1GenoTable6K_Msk_750_10.genotypes', 'libphase=lib.phase')
api2$getargs()
api2$getargs('alphaplantimpute2', 'impute', 'out=SimPop16K_Imp_R','founders=SimPop9GenoTable6K_Founders.txt' ,'genotypes=SimPop1GenoTable6K_Msk_750_10.genotypes', 'libphase=lib.phase')
# Construct the argument list
sys.argv = ['alphaplantimpute2', '-impute', '-out', 'SimPop16K_Imp','-founders','SimPop9GenoTable6K_Founders.txt' ,'-genotypes', 'SimPop1GenoTable6K_Msk_750_10.genotypes', '-libphase', 'lib.phase']
reticulate::repl_python()
exit
reticulate::repl_python()
repl_python()
import sys
import alphaplantimpute2.alphaplantimpute2 as api2
# Backup the original sys.argv
original_argv = sys.argv
# Construct the argument list
sys.argv = ['alphaplantimpute2', '-impute', '-out', 'SimPop16K_Imp','-founders','SimPop9GenoTable6K_Founders.txt' ,'-genotypes', 'SimPop1GenoTable6K_Msk_750_10.genotypes', '-libphase', 'lib.phase']
# Call the main function with the provided arguments
try:
api2.main()
except SystemExit as e:
# Handle the SystemExit exception to prevent the script from being terminated
print(f"Exited with code {e.code}")
# Restore the original sys.argv
sys.argv = original_argv
exit
result= reticulate::py_run_string("output=alphaplantimpute2.alphaplantimpute2()")
result= reticulate::py_run_string("output=alphaplantimpute2.alphaplantimpute2.main()")
result= reticulate::py_run_string("sys.argv = ['alphaplantimpute2', '-impute', '-out', 'SimPop16K_Imp','-founders','SimPop9GenoTable6K_Founders.txt' ,'-genotypes', 'SimPop1GenoTable6K_Msk_750_10.genotypes', '-libphase', 'lib.phase'];
output=alphaplantimpute2.alphaplantimpute2.main()")
result$output
api2$main()
api2$main
ls()
arguments
command
rm(command)
functions_list
ls()
result
result
result$alphaplantimpute2
result$original_argv
arguments
is.list(arguments)
arguments <- list(
'option1'="alphaplantimpute2",
'option2'= "impute",
'option3'= "out=SimPop16K_Imp_R",
'option4'= "founders=SimPop9GenoTable6K_Founders.txt",
'option5'= "genotypes=SimPop1GenoTable6K_Msk_750_10.genotypes",
'option6'= "-libphase=lib.phase"
)
arguments
rm(arguments)
ls()
api2$main
api2$main()
rm(result)
ls()
api2.main()
api2=import("alphaplantimpute2.alphaplantimpute2")
api2$main()
ls()
library(shiny); runApp('API_Shiny_Interface_V2.R')
runApp('API_Shiny_Interface_V2.R')
runApp('API_Shiny_Interface_V2.R')
library(shiny); runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
?tools::file_path_sans_ext
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
getwd()
currentGeno <- read.table("current_GenoTable.genotypes",header=F)
dim(currentGeno)
currentGeno[1:5,1:15]
length(which(duplicated(currentGeno[,1]))
)
Geno <- read.table("SimPop1GenoTable6K_Msk_750_10.genotypes")
dim(Geno)
Geno[1:5,1:10]
anyNA(currentGeno)
currentGeno[currentGeno==NA] <- 9
anyNA(currentGeno)
currentGeno[is.na(currentGeno)] <- 9
anyNA(currentGeno)
write.table(currentGeno,"current_GenoTable.genotypes",quote=F,sep=" ",row.names = F,col.names = F)
library(shiny); runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V2.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V2.R')
runApp('API_Shiny_Interface_V2.R')
runApp('API_Shiny_Interface_V3.R')
?fileInput
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V2.R')
runApp('API_Shiny_Interface_V2.R')
runApp('API_Shiny_Interface_V2.R')
runApp('API_Shiny_Interface_V2.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
library(shiny); runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
library(shiny); runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
?tempfile
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
?r_bg
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
library(shiny); runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
print(paste("API","Processing","Imputing","Complete",sep="\n"))
print(paste("API","Processing","Imputing","Complete",sep="\t"),collapse="\n")
print(paste("API\n","Processing\n","Imputing\n","Complete"),collapse="\n")
paste("API\n","Processing\n","Imputing\n","Complete",sep="\n")
paste("API","Processing","Imputing","Complete",sep="\n")
cat(paste("API","Processing","Imputing","Complete",sep="\n"),collapse="\n")
runApp('API_Shiny_Interface_V3.R')
cat(paste("API","Processing","Imputing","Complete",sep="\n"),collapse="\n")
txt <- cat(paste("API","Processing","Imputing","Complete",sep="\n"),collapse="\n")
txt
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
?readLines
txt
out
paste("API","Processing","Imputing","Complete",sep="\n")
out <- paste("API","Processing","Imputing","Complete",sep="\n")
out
txt <- out
paste(txt,"Imputation Completed",sep="\n")
paste(txt,"Imputation Completed",sep="\n",collapse="\n")
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
tab <- matrix(0,5,5)
dim(tab)
paste(dim(tab),sep=" "))
paste(dim(tab),sep=" ")
paste(as.vector(dim(tab)),sep=" ")
paste(dim(tab),sep=" ")
length(paste(dim(tab),sep=" "))
length(paste(as.vector(dim(tab)),sep=" "))
length(paste(as.vector(dim(tab)),collapse=" "))
length(paste(dim(tab),collapse=" "))
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
library(shiny); runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
runApp('API_Shiny_Interface_V3.R')
library(shiny); runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/GSPipelineApp/R/ImputeHome.R')
library(htmltools)
library(shiny); runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/GSPipelineApp/R/ImputeHome.R')
unloadNamespace(htmltools)
unloadNamespace("htmltools")
rm(list=ls())
ls()
library(shiny); runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/GSPipelineApp/R/ImputeHome.R')
unloadNamespace("htmltools")
unloadNamespace("shiny")
unloadNamespace("htmltools")
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
remove.packages("htmltools")
install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
library(shiny); runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/GSPipelineApp/R/ImputeHome.R')
library(shiny); runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/GSPipelineApp/R/ImputeHome.R')
install.packages(c("AlphaSimR", "BGLR", "bWGR", "cli", "data.table", "dplyr", "e1071", "fansi", "gdtools", "gert", "httpuv", "httr2", "jsonlite", "later", "leaflet", "Matrix", "matrixStats", "pinfsc50", "processx", "progress", "qtl", "ragg", "Rdpack", "rJava", "rlang", "rrBLUP", "RSQLite", "s2", "sass", "sommer", "stringi", "units", "utf8", "vcfR", "vctrs", "vroom", "wk", "XML", "xml2"))
library(shiny); runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/GSPipelineApp/R/ImputeHome.R')
library(htmltools)
remove.packages("htmltools")
remove.packages("htmltools")
shiny::runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
runApp('C:/Users/ivanv/Desktop/UMN_GIT/GPSoy/SoyGen2App/App')
