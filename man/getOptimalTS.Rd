% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Opt_TS_Functions.r
\name{getOptimalTS}
\alias{getOptimalTS}
\title{Generate an Optimal Training Subset Using Genetic Algorithm}
\usage{
getOptimalTS(
  Data_Table_Num_Filt_List,
  trait,
  nTraits,
  noCandidates,
  nTrainToSelect,
  GAParameters
)
}
\arguments{
\item{Data_Table_Num_Filt_List}{A list containing two data frames:
- The first data frame (`TrainData_Table_Num_Filt`) represents the training data.
- The second data frame (`TestData_Table_Num_Filt`) represents the test data.}

\item{trait}{A character vector specifying the trait(s) to analyze. Can be a single trait or multiple traits.}

\item{nTraits}{An integer specifying the number of traits in the dataset.}

\item{noCandidates}{An integer specifying the number of candidates to consider for training.}

\item{nTrainToSelect}{An integer specifying the number of training samples to select optimally.}

\item{GAParameters}{A list containing parameters for the genetic algorithm:
- `errorstat`: A single or multiple error statistics to optimize.
- `InitPop`: Initial population for the GA.
- `npop`: Number of individuals in the population.
- `nelite`: Number of elite individuals to retain.
- `mutprob`: Mutation probability.
- `mutintensity`: Intensity of mutation.
- `niterations`: Number of iterations for the GA.
- `minitbefstop`: Minimum iterations before stopping.
- `tabu`: Whether to use tabu search.
- `tabumemsize`: Size of the tabu memory.
- `plotiters`: Whether to plot iterations.
- `lambda`: Regularization parameter.
- `mc.cores`: Number of cores for parallel execution.}
}
\value{
A list containing:
  - `Train_STPGA`: Results of the genetic algorithm, including evaluated solutions.
  - `Train_STPGA_Ids`: Character vector of IDs for the selected optimal training samples.
  - `Train_STPGA_Indices`: Integer vector of indices corresponding to the selected samples.
}
\description{
The `getOptimalTS` function identifies an optimal subset of training samples
for genomic prediction using a genetic algorithm (GA). It reduces or keeps candidate
data, imputes genotypic data, computes principal components (PCs), and selects
the optimal subset based on specified parameters.
}
\details{
- The function processes training and test data to compute genotypic data.
- Genotypic data is imputed using the `snpQC` function.
- Principal components are calculated from the genotypic data.
- A genetic algorithm is applied to select an optimal training subset based on user-specified parameters.
- Supports both single-objective and multi-objective optimization.
}
\examples{
\dontrun{
# Example input data
TrainData <- data.frame(
  ss1 = c(1, 0, 1),
  ss2 = c(0, 1, 0),
  trait1 = c(5.2, 6.1, 4.8)
)
TestData <- data.frame(
  ss1 = c(1, 1),
  ss2 = c(0, 0),
  trait1 = c(5.9, 4.6)
)

Data_Table_Num_Filt_List <- list(TrainData, TestData)

GAParams <- list(
  errorstat = "MSE",
  InitPop = NULL,
  npop = 50,
  nelite = 5,
  mutprob = 0.01,
  mutintensity = 1,
  niterations = 100,
  minitbefstop = 10,
  tabu = FALSE,
  tabumemsize = 5,
  plotiters = TRUE,
  lambda = 0.5,
  mc.cores = 2
)

# Generate an optimal training subset
result <- getOptimalTS(
  Data_Table_Num_Filt_List,
  trait = "trait1",
  nTraits = 1,
  noCandidates = 3,
  nTrainToSelect = 2,
  GAParameters = GAParams
)

print(result$Train_STPGA_Ids)
}

}
